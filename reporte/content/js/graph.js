/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 509.0, "minX": 0.0, "maxY": 14664.0, "series": [{"data": [[0.0, 509.0], [0.1, 528.0], [0.2, 758.0], [0.3, 819.0], [0.4, 892.0], [0.5, 913.0], [0.6, 1079.0], [0.7, 1089.0], [0.8, 1160.0], [0.9, 1224.0], [1.0, 1439.0], [1.1, 1478.0], [1.2, 1505.0], [1.3, 1616.0], [1.4, 1620.0], [1.5, 1623.0], [1.6, 1625.0], [1.7, 1626.0], [1.8, 1634.0], [1.9, 1636.0], [2.0, 1674.0], [2.1, 1687.0], [2.2, 1691.0], [2.3, 1704.0], [2.4, 1709.0], [2.5, 1721.0], [2.6, 1751.0], [2.7, 1769.0], [2.8, 1775.0], [2.9, 1796.0], [3.0, 1802.0], [3.1, 1863.0], [3.2, 1880.0], [3.3, 1888.0], [3.4, 1888.0], [3.5, 1893.0], [3.6, 1895.0], [3.7, 1902.0], [3.8, 1906.0], [3.9, 1915.0], [4.0, 1921.0], [4.1, 1927.0], [4.2, 1933.0], [4.3, 1943.0], [4.4, 1944.0], [4.5, 1955.0], [4.6, 1955.0], [4.7, 1987.0], [4.8, 1990.0], [4.9, 1996.0], [5.0, 2002.0], [5.1, 2007.0], [5.2, 2016.0], [5.3, 2025.0], [5.4, 2025.0], [5.5, 2032.0], [5.6, 2038.0], [5.7, 2042.0], [5.8, 2043.0], [5.9, 2050.0], [6.0, 2051.0], [6.1, 2075.0], [6.2, 2082.0], [6.3, 2087.0], [6.4, 2115.0], [6.5, 2136.0], [6.6, 2140.0], [6.7, 2140.0], [6.8, 2145.0], [6.9, 2147.0], [7.0, 2161.0], [7.1, 2161.0], [7.2, 2171.0], [7.3, 2181.0], [7.4, 2184.0], [7.5, 2188.0], [7.6, 2191.0], [7.7, 2193.0], [7.8, 2195.0], [7.9, 2197.0], [8.0, 2200.0], [8.1, 2201.0], [8.2, 2204.0], [8.3, 2209.0], [8.4, 2213.0], [8.5, 2214.0], [8.6, 2226.0], [8.7, 2227.0], [8.8, 2235.0], [8.9, 2238.0], [9.0, 2263.0], [9.1, 2270.0], [9.2, 2272.0], [9.3, 2288.0], [9.4, 2314.0], [9.5, 2321.0], [9.6, 2333.0], [9.7, 2345.0], [9.8, 2359.0], [9.9, 2364.0], [10.0, 2374.0], [10.1, 2382.0], [10.2, 2394.0], [10.3, 2400.0], [10.4, 2418.0], [10.5, 2422.0], [10.6, 2429.0], [10.7, 2432.0], [10.8, 2442.0], [10.9, 2448.0], [11.0, 2455.0], [11.1, 2458.0], [11.2, 2460.0], [11.3, 2463.0], [11.4, 2477.0], [11.5, 2497.0], [11.6, 2514.0], [11.7, 2514.0], [11.8, 2528.0], [11.9, 2554.0], [12.0, 2598.0], [12.1, 2608.0], [12.2, 2621.0], [12.3, 2641.0], [12.4, 2659.0], [12.5, 2666.0], [12.6, 2683.0], [12.7, 2699.0], [12.8, 2705.0], [12.9, 2707.0], [13.0, 2727.0], [13.1, 2736.0], [13.2, 2748.0], [13.3, 2777.0], [13.4, 2819.0], [13.5, 2827.0], [13.6, 2879.0], [13.7, 2958.0], [13.8, 2980.0], [13.9, 2993.0], [14.0, 3018.0], [14.1, 3036.0], [14.2, 3067.0], [14.3, 3111.0], [14.4, 3123.0], [14.5, 3167.0], [14.6, 3184.0], [14.7, 3265.0], [14.8, 3289.0], [14.9, 3299.0], [15.0, 3305.0], [15.1, 3339.0], [15.2, 3414.0], [15.3, 3439.0], [15.4, 3454.0], [15.5, 3486.0], [15.6, 3549.0], [15.7, 3552.0], [15.8, 3555.0], [15.9, 3613.0], [16.0, 3649.0], [16.1, 3653.0], [16.2, 3679.0], [16.3, 3680.0], [16.4, 3684.0], [16.5, 3692.0], [16.6, 3707.0], [16.7, 3743.0], [16.8, 3790.0], [16.9, 3845.0], [17.0, 3906.0], [17.1, 3914.0], [17.2, 3921.0], [17.3, 3927.0], [17.4, 3952.0], [17.5, 3969.0], [17.6, 3974.0], [17.7, 3980.0], [17.8, 3985.0], [17.9, 3992.0], [18.0, 3995.0], [18.1, 4006.0], [18.2, 4029.0], [18.3, 4032.0], [18.4, 4042.0], [18.5, 4043.0], [18.6, 4051.0], [18.7, 4069.0], [18.8, 4081.0], [18.9, 4088.0], [19.0, 4093.0], [19.1, 4106.0], [19.2, 4122.0], [19.3, 4173.0], [19.4, 4195.0], [19.5, 4205.0], [19.6, 4205.0], [19.7, 4213.0], [19.8, 4215.0], [19.9, 4216.0], [20.0, 4242.0], [20.1, 4248.0], [20.2, 4282.0], [20.3, 4284.0], [20.4, 4293.0], [20.5, 4298.0], [20.6, 4342.0], [20.7, 4347.0], [20.8, 4362.0], [20.9, 4395.0], [21.0, 4429.0], [21.1, 4434.0], [21.2, 4442.0], [21.3, 4451.0], [21.4, 4456.0], [21.5, 4459.0], [21.6, 4487.0], [21.7, 4531.0], [21.8, 4566.0], [21.9, 4567.0], [22.0, 4571.0], [22.1, 4593.0], [22.2, 4614.0], [22.3, 4624.0], [22.4, 4635.0], [22.5, 4640.0], [22.6, 4667.0], [22.7, 4669.0], [22.8, 4683.0], [22.9, 4697.0], [23.0, 4751.0], [23.1, 4788.0], [23.2, 4805.0], [23.3, 4806.0], [23.4, 4827.0], [23.5, 4827.0], [23.6, 4844.0], [23.7, 4844.0], [23.8, 4862.0], [23.9, 4885.0], [24.0, 4895.0], [24.1, 4906.0], [24.2, 4915.0], [24.3, 4928.0], [24.4, 4935.0], [24.5, 4936.0], [24.6, 4944.0], [24.7, 4958.0], [24.8, 4969.0], [24.9, 4970.0], [25.0, 4987.0], [25.1, 4988.0], [25.2, 4993.0], [25.3, 5000.0], [25.4, 5031.0], [25.5, 5041.0], [25.6, 5084.0], [25.7, 5099.0], [25.8, 5127.0], [25.9, 5130.0], [26.0, 5144.0], [26.1, 5145.0], [26.2, 5149.0], [26.3, 5149.0], [26.4, 5151.0], [26.5, 5153.0], [26.6, 5164.0], [26.7, 5171.0], [26.8, 5172.0], [26.9, 5186.0], [27.0, 5250.0], [27.1, 5263.0], [27.2, 5284.0], [27.3, 5288.0], [27.4, 5291.0], [27.5, 5298.0], [27.6, 5335.0], [27.7, 5338.0], [27.8, 5368.0], [27.9, 5379.0], [28.0, 5391.0], [28.1, 5397.0], [28.2, 5486.0], [28.3, 5504.0], [28.4, 5514.0], [28.5, 5535.0], [28.6, 5558.0], [28.7, 5575.0], [28.8, 5596.0], [28.9, 5600.0], [29.0, 5619.0], [29.1, 5621.0], [29.2, 5628.0], [29.3, 5631.0], [29.4, 5637.0], [29.5, 5642.0], [29.6, 5652.0], [29.7, 5658.0], [29.8, 5668.0], [29.9, 5682.0], [30.0, 5788.0], [30.1, 5817.0], [30.2, 5861.0], [30.3, 5862.0], [30.4, 5899.0], [30.5, 5923.0], [30.6, 5938.0], [30.7, 5947.0], [30.8, 5965.0], [30.9, 5968.0], [31.0, 5997.0], [31.1, 6009.0], [31.2, 6037.0], [31.3, 6042.0], [31.4, 6045.0], [31.5, 6061.0], [31.6, 6069.0], [31.7, 6071.0], [31.8, 6111.0], [31.9, 6145.0], [32.0, 6152.0], [32.1, 6157.0], [32.2, 6193.0], [32.3, 6214.0], [32.4, 6225.0], [32.5, 6226.0], [32.6, 6266.0], [32.7, 6268.0], [32.8, 6289.0], [32.9, 6304.0], [33.0, 6346.0], [33.1, 6353.0], [33.2, 6363.0], [33.3, 6368.0], [33.4, 6376.0], [33.5, 6391.0], [33.6, 6405.0], [33.7, 6407.0], [33.8, 6410.0], [33.9, 6412.0], [34.0, 6413.0], [34.1, 6432.0], [34.2, 6435.0], [34.3, 6478.0], [34.4, 6498.0], [34.5, 6521.0], [34.6, 6525.0], [34.7, 6556.0], [34.8, 6559.0], [34.9, 6595.0], [35.0, 6608.0], [35.1, 6634.0], [35.2, 6641.0], [35.3, 6690.0], [35.4, 6702.0], [35.5, 6716.0], [35.6, 6721.0], [35.7, 6723.0], [35.8, 6724.0], [35.9, 6729.0], [36.0, 6732.0], [36.1, 6748.0], [36.2, 6761.0], [36.3, 6795.0], [36.4, 6805.0], [36.5, 6826.0], [36.6, 6838.0], [36.7, 6865.0], [36.8, 6868.0], [36.9, 6872.0], [37.0, 6877.0], [37.1, 6893.0], [37.2, 6903.0], [37.3, 6913.0], [37.4, 6924.0], [37.5, 6952.0], [37.6, 6954.0], [37.7, 6965.0], [37.8, 6970.0], [37.9, 6980.0], [38.0, 6981.0], [38.1, 6985.0], [38.2, 6985.0], [38.3, 6989.0], [38.4, 6991.0], [38.5, 6993.0], [38.6, 6994.0], [38.7, 7002.0], [38.8, 7007.0], [38.9, 7026.0], [39.0, 7037.0], [39.1, 7047.0], [39.2, 7048.0], [39.3, 7061.0], [39.4, 7066.0], [39.5, 7093.0], [39.6, 7095.0], [39.7, 7103.0], [39.8, 7112.0], [39.9, 7127.0], [40.0, 7150.0], [40.1, 7187.0], [40.2, 7200.0], [40.3, 7247.0], [40.4, 7249.0], [40.5, 7283.0], [40.6, 7284.0], [40.7, 7289.0], [40.8, 7298.0], [40.9, 7311.0], [41.0, 7323.0], [41.1, 7335.0], [41.2, 7346.0], [41.3, 7354.0], [41.4, 7354.0], [41.5, 7367.0], [41.6, 7373.0], [41.7, 7395.0], [41.8, 7400.0], [41.9, 7406.0], [42.0, 7422.0], [42.1, 7444.0], [42.2, 7465.0], [42.3, 7486.0], [42.4, 7509.0], [42.5, 7525.0], [42.6, 7528.0], [42.7, 7548.0], [42.8, 7553.0], [42.9, 7578.0], [43.0, 7585.0], [43.1, 7634.0], [43.2, 7661.0], [43.3, 7705.0], [43.4, 7709.0], [43.5, 7785.0], [43.6, 7840.0], [43.7, 7882.0], [43.8, 7893.0], [43.9, 7958.0], [44.0, 7972.0], [44.1, 7981.0], [44.2, 7983.0], [44.3, 7984.0], [44.4, 8002.0], [44.5, 8032.0], [44.6, 8055.0], [44.7, 8078.0], [44.8, 8098.0], [44.9, 8128.0], [45.0, 8135.0], [45.1, 8214.0], [45.2, 8215.0], [45.3, 8235.0], [45.4, 8254.0], [45.5, 8276.0], [45.6, 8289.0], [45.7, 8334.0], [45.8, 8335.0], [45.9, 8351.0], [46.0, 8358.0], [46.1, 8362.0], [46.2, 8374.0], [46.3, 8392.0], [46.4, 8419.0], [46.5, 8436.0], [46.6, 8438.0], [46.7, 8462.0], [46.8, 8466.0], [46.9, 8477.0], [47.0, 8480.0], [47.1, 8547.0], [47.2, 8556.0], [47.3, 8582.0], [47.4, 8588.0], [47.5, 8593.0], [47.6, 8612.0], [47.7, 8657.0], [47.8, 8667.0], [47.9, 8692.0], [48.0, 8692.0], [48.1, 8723.0], [48.2, 8751.0], [48.3, 8767.0], [48.4, 8776.0], [48.5, 8788.0], [48.6, 8792.0], [48.7, 8807.0], [48.8, 8812.0], [48.9, 8832.0], [49.0, 8848.0], [49.1, 8870.0], [49.2, 8875.0], [49.3, 8877.0], [49.4, 8883.0], [49.5, 8888.0], [49.6, 8905.0], [49.7, 8918.0], [49.8, 8930.0], [49.9, 8944.0], [50.0, 8944.0], [50.1, 8946.0], [50.2, 8948.0], [50.3, 8967.0], [50.4, 8967.0], [50.5, 8974.0], [50.6, 8997.0], [50.7, 9035.0], [50.8, 9072.0], [50.9, 9078.0], [51.0, 9078.0], [51.1, 9086.0], [51.2, 9089.0], [51.3, 9108.0], [51.4, 9113.0], [51.5, 9153.0], [51.6, 9156.0], [51.7, 9183.0], [51.8, 9196.0], [51.9, 9200.0], [52.0, 9201.0], [52.1, 9205.0], [52.2, 9206.0], [52.3, 9228.0], [52.4, 9235.0], [52.5, 9244.0], [52.6, 9249.0], [52.7, 9272.0], [52.8, 9274.0], [52.9, 9285.0], [53.0, 9316.0], [53.1, 9338.0], [53.2, 9352.0], [53.3, 9367.0], [53.4, 9379.0], [53.5, 9393.0], [53.6, 9405.0], [53.7, 9410.0], [53.8, 9410.0], [53.9, 9417.0], [54.0, 9460.0], [54.1, 9469.0], [54.2, 9516.0], [54.3, 9517.0], [54.4, 9521.0], [54.5, 9529.0], [54.6, 9530.0], [54.7, 9577.0], [54.8, 9580.0], [54.9, 9608.0], [55.0, 9618.0], [55.1, 9623.0], [55.2, 9624.0], [55.3, 9649.0], [55.4, 9650.0], [55.5, 9655.0], [55.6, 9655.0], [55.7, 9681.0], [55.8, 9704.0], [55.9, 9734.0], [56.0, 9775.0], [56.1, 9784.0], [56.2, 9815.0], [56.3, 9825.0], [56.4, 9842.0], [56.5, 9849.0], [56.6, 9868.0], [56.7, 9876.0], [56.8, 9887.0], [56.9, 9919.0], [57.0, 9956.0], [57.1, 9963.0], [57.2, 9996.0], [57.3, 10008.0], [57.4, 10032.0], [57.5, 10044.0], [57.6, 10071.0], [57.7, 10079.0], [57.8, 10083.0], [57.9, 10100.0], [58.0, 10116.0], [58.1, 10137.0], [58.2, 10143.0], [58.3, 10150.0], [58.4, 10152.0], [58.5, 10184.0], [58.6, 10184.0], [58.7, 10198.0], [58.8, 10208.0], [58.9, 10234.0], [59.0, 10262.0], [59.1, 10305.0], [59.2, 10317.0], [59.3, 10339.0], [59.4, 10340.0], [59.5, 10348.0], [59.6, 10370.0], [59.7, 10396.0], [59.8, 10417.0], [59.9, 10420.0], [60.0, 10436.0], [60.1, 10443.0], [60.2, 10455.0], [60.3, 10465.0], [60.4, 10469.0], [60.5, 10499.0], [60.6, 10504.0], [60.7, 10517.0], [60.8, 10532.0], [60.9, 10568.0], [61.0, 10572.0], [61.1, 10574.0], [61.2, 10577.0], [61.3, 10583.0], [61.4, 10590.0], [61.5, 10603.0], [61.6, 10608.0], [61.7, 10615.0], [61.8, 10624.0], [61.9, 10641.0], [62.0, 10644.0], [62.1, 10655.0], [62.2, 10672.0], [62.3, 10676.0], [62.4, 10677.0], [62.5, 10682.0], [62.6, 10682.0], [62.7, 10696.0], [62.8, 10706.0], [62.9, 10709.0], [63.0, 10711.0], [63.1, 10720.0], [63.2, 10734.0], [63.3, 10755.0], [63.4, 10756.0], [63.5, 10770.0], [63.6, 10771.0], [63.7, 10787.0], [63.8, 10789.0], [63.9, 10797.0], [64.0, 10801.0], [64.1, 10813.0], [64.2, 10821.0], [64.3, 10826.0], [64.4, 10833.0], [64.5, 10869.0], [64.6, 10869.0], [64.7, 10879.0], [64.8, 10881.0], [64.9, 10884.0], [65.0, 10894.0], [65.1, 10895.0], [65.2, 10897.0], [65.3, 10908.0], [65.4, 10915.0], [65.5, 10939.0], [65.6, 10942.0], [65.7, 10952.0], [65.8, 10954.0], [65.9, 10966.0], [66.0, 10977.0], [66.1, 10987.0], [66.2, 10993.0], [66.3, 10995.0], [66.4, 10998.0], [66.5, 11004.0], [66.6, 11013.0], [66.7, 11018.0], [66.8, 11025.0], [66.9, 11028.0], [67.0, 11048.0], [67.1, 11056.0], [67.2, 11063.0], [67.3, 11100.0], [67.4, 11102.0], [67.5, 11122.0], [67.6, 11133.0], [67.7, 11138.0], [67.8, 11139.0], [67.9, 11154.0], [68.0, 11157.0], [68.1, 11180.0], [68.2, 11190.0], [68.3, 11199.0], [68.4, 11200.0], [68.5, 11244.0], [68.6, 11250.0], [68.7, 11265.0], [68.8, 11265.0], [68.9, 11297.0], [69.0, 11305.0], [69.1, 11340.0], [69.2, 11351.0], [69.3, 11353.0], [69.4, 11357.0], [69.5, 11406.0], [69.6, 11409.0], [69.7, 11416.0], [69.8, 11425.0], [69.9, 11464.0], [70.0, 11489.0], [70.1, 11532.0], [70.2, 11594.0], [70.3, 11632.0], [70.4, 11641.0], [70.5, 11663.0], [70.6, 11674.0], [70.7, 11693.0], [70.8, 11698.0], [70.9, 11727.0], [71.0, 11747.0], [71.1, 11788.0], [71.2, 11797.0], [71.3, 11809.0], [71.4, 11816.0], [71.5, 11825.0], [71.6, 11827.0], [71.7, 11835.0], [71.8, 11840.0], [71.9, 11884.0], [72.0, 11888.0], [72.1, 11901.0], [72.2, 11906.0], [72.3, 11954.0], [72.4, 12005.0], [72.5, 12041.0], [72.6, 12045.0], [72.7, 12049.0], [72.8, 12049.0], [72.9, 12068.0], [73.0, 12078.0], [73.1, 12125.0], [73.2, 12147.0], [73.3, 12170.0], [73.4, 12179.0], [73.5, 12200.0], [73.6, 12201.0], [73.7, 12207.0], [73.8, 12224.0], [73.9, 12226.0], [74.0, 12229.0], [74.1, 12236.0], [74.2, 12241.0], [74.3, 12244.0], [74.4, 12245.0], [74.5, 12259.0], [74.6, 12260.0], [74.7, 12270.0], [74.8, 12271.0], [74.9, 12276.0], [75.0, 12277.0], [75.1, 12280.0], [75.2, 12287.0], [75.3, 12293.0], [75.4, 12297.0], [75.5, 12309.0], [75.6, 12334.0], [75.7, 12342.0], [75.8, 12342.0], [75.9, 12348.0], [76.0, 12350.0], [76.1, 12357.0], [76.2, 12358.0], [76.3, 12360.0], [76.4, 12375.0], [76.5, 12386.0], [76.6, 12400.0], [76.7, 12408.0], [76.8, 12411.0], [76.9, 12431.0], [77.0, 12433.0], [77.1, 12447.0], [77.2, 12487.0], [77.3, 12519.0], [77.4, 12520.0], [77.5, 12530.0], [77.6, 12530.0], [77.7, 12532.0], [77.8, 12546.0], [77.9, 12562.0], [78.0, 12568.0], [78.1, 12579.0], [78.2, 12583.0], [78.3, 12614.0], [78.4, 12615.0], [78.5, 12626.0], [78.6, 12632.0], [78.7, 12651.0], [78.8, 12652.0], [78.9, 12657.0], [79.0, 12657.0], [79.1, 12661.0], [79.2, 12663.0], [79.3, 12671.0], [79.4, 12715.0], [79.5, 12722.0], [79.6, 12745.0], [79.7, 12773.0], [79.8, 12774.0], [79.9, 12800.0], [80.0, 12801.0], [80.1, 12820.0], [80.2, 12833.0], [80.3, 12838.0], [80.4, 12853.0], [80.5, 12871.0], [80.6, 12917.0], [80.7, 12956.0], [80.8, 12961.0], [80.9, 12984.0], [81.0, 12988.0], [81.1, 13000.0], [81.2, 13004.0], [81.3, 13040.0], [81.4, 13043.0], [81.5, 13100.0], [81.6, 13132.0], [81.7, 13170.0], [81.8, 13170.0], [81.9, 13189.0], [82.0, 13190.0], [82.1, 13195.0], [82.2, 13198.0], [82.3, 13222.0], [82.4, 13222.0], [82.5, 13232.0], [82.6, 13237.0], [82.7, 13250.0], [82.8, 13258.0], [82.9, 13297.0], [83.0, 13301.0], [83.1, 13327.0], [83.2, 13327.0], [83.3, 13350.0], [83.4, 13361.0], [83.5, 13363.0], [83.6, 13364.0], [83.7, 13408.0], [83.8, 13414.0], [83.9, 13430.0], [84.0, 13430.0], [84.1, 13444.0], [84.2, 13477.0], [84.3, 13485.0], [84.4, 13487.0], [84.5, 13529.0], [84.6, 13547.0], [84.7, 13559.0], [84.8, 13562.0], [84.9, 13572.0], [85.0, 13576.0], [85.1, 13596.0], [85.2, 13596.0], [85.3, 13603.0], [85.4, 13612.0], [85.5, 13617.0], [85.6, 13623.0], [85.7, 13635.0], [85.8, 13642.0], [85.9, 13645.0], [86.0, 13645.0], [86.1, 13656.0], [86.2, 13664.0], [86.3, 13688.0], [86.4, 13691.0], [86.5, 13694.0], [86.6, 13695.0], [86.7, 13719.0], [86.8, 13733.0], [86.9, 13746.0], [87.0, 13748.0], [87.1, 13782.0], [87.2, 13788.0], [87.3, 13795.0], [87.4, 13797.0], [87.5, 13800.0], [87.6, 13803.0], [87.7, 13818.0], [87.8, 13823.0], [87.9, 13830.0], [88.0, 13832.0], [88.1, 13844.0], [88.2, 13846.0], [88.3, 13849.0], [88.4, 13858.0], [88.5, 13862.0], [88.6, 13865.0], [88.7, 13875.0], [88.8, 13879.0], [88.9, 13883.0], [89.0, 13892.0], [89.1, 13914.0], [89.2, 13921.0], [89.3, 13926.0], [89.4, 13927.0], [89.5, 13958.0], [89.6, 13971.0], [89.7, 13991.0], [89.8, 14009.0], [89.9, 14012.0], [90.0, 14013.0], [90.1, 14042.0], [90.2, 14045.0], [90.3, 14065.0], [90.4, 14101.0], [90.5, 14110.0], [90.6, 14110.0], [90.7, 14113.0], [90.8, 14120.0], [90.9, 14122.0], [91.0, 14126.0], [91.1, 14131.0], [91.2, 14149.0], [91.3, 14153.0], [91.4, 14154.0], [91.5, 14159.0], [91.6, 14173.0], [91.7, 14190.0], [91.8, 14191.0], [91.9, 14199.0], [92.0, 14203.0], [92.1, 14230.0], [92.2, 14239.0], [92.3, 14251.0], [92.4, 14255.0], [92.5, 14269.0], [92.6, 14269.0], [92.7, 14278.0], [92.8, 14284.0], [92.9, 14293.0], [93.0, 14301.0], [93.1, 14307.0], [93.2, 14310.0], [93.3, 14316.0], [93.4, 14320.0], [93.5, 14322.0], [93.6, 14322.0], [93.7, 14328.0], [93.8, 14328.0], [93.9, 14329.0], [94.0, 14334.0], [94.1, 14357.0], [94.2, 14359.0], [94.3, 14366.0], [94.4, 14377.0], [94.5, 14378.0], [94.6, 14381.0], [94.7, 14382.0], [94.8, 14386.0], [94.9, 14387.0], [95.0, 14387.0], [95.1, 14397.0], [95.2, 14405.0], [95.3, 14410.0], [95.4, 14411.0], [95.5, 14417.0], [95.6, 14420.0], [95.7, 14423.0], [95.8, 14425.0], [95.9, 14425.0], [96.0, 14427.0], [96.1, 14433.0], [96.2, 14434.0], [96.3, 14437.0], [96.4, 14443.0], [96.5, 14446.0], [96.6, 14447.0], [96.7, 14450.0], [96.8, 14451.0], [96.9, 14455.0], [97.0, 14458.0], [97.1, 14459.0], [97.2, 14459.0], [97.3, 14461.0], [97.4, 14464.0], [97.5, 14466.0], [97.6, 14467.0], [97.7, 14470.0], [97.8, 14472.0], [97.9, 14473.0], [98.0, 14473.0], [98.1, 14473.0], [98.2, 14475.0], [98.3, 14479.0], [98.4, 14481.0], [98.5, 14481.0], [98.6, 14483.0], [98.7, 14484.0], [98.8, 14484.0], [98.9, 14486.0], [99.0, 14487.0], [99.1, 14489.0], [99.2, 14489.0], [99.3, 14491.0], [99.4, 14497.0], [99.5, 14498.0], [99.6, 14506.0], [99.7, 14509.0], [99.8, 14521.0], [99.9, 14611.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 66.0, "series": [{"data": [[500.0, 2.0], [600.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 4.0], [1100.0, 1.0], [1200.0, 1.0], [1400.0, 3.0], [1500.0, 2.0], [1600.0, 15.0], [1700.0, 10.0], [1800.0, 10.0], [1900.0, 20.0], [2000.0, 22.0], [2100.0, 24.0], [2200.0, 20.0], [2300.0, 14.0], [2400.0, 19.0], [2500.0, 8.0], [2600.0, 10.0], [2700.0, 9.0], [2800.0, 5.0], [2900.0, 5.0], [3000.0, 4.0], [3100.0, 6.0], [3200.0, 4.0], [3300.0, 4.0], [3400.0, 5.0], [3500.0, 5.0], [3700.0, 5.0], [3600.0, 10.0], [3800.0, 2.0], [3900.0, 16.0], [4000.0, 15.0], [4100.0, 6.0], [4200.0, 16.0], [4300.0, 6.0], [4400.0, 11.0], [4500.0, 7.0], [4600.0, 12.0], [4700.0, 4.0], [4800.0, 13.0], [4900.0, 18.0], [5000.0, 7.0], [5100.0, 19.0], [5200.0, 8.0], [5300.0, 9.0], [5400.0, 2.0], [5500.0, 9.0], [5600.0, 16.0], [5700.0, 2.0], [5800.0, 6.0], [5900.0, 9.0], [6000.0, 11.0], [6100.0, 7.0], [6200.0, 9.0], [6300.0, 11.0], [6400.0, 12.0], [6500.0, 8.0], [6600.0, 6.0], [6700.0, 15.0], [6800.0, 12.0], [6900.0, 22.0], [7000.0, 16.0], [7100.0, 7.0], [7200.0, 10.0], [7300.0, 14.0], [7400.0, 9.0], [7500.0, 11.0], [7600.0, 3.0], [7800.0, 4.0], [7700.0, 4.0], [7900.0, 8.0], [8000.0, 7.0], [8100.0, 4.0], [8200.0, 8.0], [8300.0, 11.0], [8400.0, 10.0], [8500.0, 8.0], [8600.0, 8.0], [8700.0, 8.0], [8800.0, 14.0], [8900.0, 16.0], [9000.0, 9.0], [9100.0, 10.0], [9200.0, 16.0], [9300.0, 9.0], [9400.0, 9.0], [9500.0, 10.0], [9600.0, 14.0], [9700.0, 6.0], [9800.0, 11.0], [9900.0, 5.0], [10000.0, 10.0], [10100.0, 13.0], [10200.0, 4.0], [10400.0, 12.0], [10500.0, 14.0], [10300.0, 11.0], [10600.0, 19.0], [10700.0, 18.0], [10800.0, 19.0], [10900.0, 18.0], [11000.0, 13.0], [11100.0, 16.0], [11200.0, 9.0], [11300.0, 8.0], [11400.0, 9.0], [11600.0, 9.0], [11500.0, 2.0], [11700.0, 6.0], [11900.0, 4.0], [11800.0, 13.0], [12100.0, 6.0], [12000.0, 11.0], [12200.0, 29.0], [12400.0, 10.0], [12300.0, 17.0], [12500.0, 15.0], [12600.0, 17.0], [12700.0, 8.0], [12800.0, 10.0], [12900.0, 8.0], [13000.0, 6.0], [13100.0, 11.0], [13200.0, 11.0], [13300.0, 11.0], [13400.0, 12.0], [13500.0, 11.0], [13600.0, 22.0], [13700.0, 12.0], [13800.0, 23.0], [13900.0, 11.0], [14000.0, 9.0], [14100.0, 24.0], [14200.0, 15.0], [14300.0, 33.0], [14400.0, 66.0], [14600.0, 2.0], [14500.0, 5.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1483.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 17.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1483.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 50.540000000000006, "minX": 1.73302014E12, "maxY": 250.59599999999998, "series": [{"data": [[1.73302014E12, 250.59599999999998]], "isOverall": false, "label": "test_500", "isController": false}, {"data": [[1.73302014E12, 100.53000000000003]], "isOverall": false, "label": "test_200", "isController": false}, {"data": [[1.73302014E12, 50.540000000000006]], "isOverall": false, "label": "test_100", "isController": false}, {"data": [[1.73302014E12, 200.56250000000006]], "isOverall": false, "label": "test_400", "isController": false}, {"data": [[1.73302014E12, 150.57333333333335]], "isOverall": false, "label": "test_300", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302014E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 758.0, "minX": 1.0, "maxY": 14664.0, "series": [{"data": [[2.0, 14497.0], [4.0, 14481.0], [6.0, 14453.0], [8.0, 14475.0], [9.0, 14484.0], [11.0, 14462.0], [12.0, 14467.0], [13.0, 14489.0], [14.0, 14496.0], [15.0, 14483.0], [16.0, 14446.0], [17.0, 14473.0], [18.0, 14479.0], [19.0, 14481.0], [20.0, 14466.0], [21.0, 14509.0], [22.0, 14489.0], [23.0, 14512.0], [24.0, 14471.0], [25.0, 14506.0], [26.0, 14472.0], [27.0, 14498.0], [28.0, 14436.0], [30.0, 14437.0], [31.0, 14453.0], [33.0, 14473.0], [32.0, 14473.0], [35.0, 14425.0], [34.0, 14506.0], [37.0, 14458.0], [36.0, 14488.0], [39.0, 14410.0], [38.0, 14487.0], [41.0, 14408.0], [40.0, 14411.0], [43.0, 14486.0], [42.0, 14413.0], [45.0, 14474.0], [44.0, 14455.0], [47.0, 14611.0], [46.0, 14664.0], [49.0, 14458.5], [51.0, 14470.0], [50.0, 14459.0], [53.0, 14464.0], [52.0, 14462.0], [55.0, 14458.5], [56.0, 14451.0], [59.0, 14434.0], [58.0, 14451.5], [61.0, 14427.0], [60.0, 14484.0], [63.0, 14417.0], [62.0, 14420.0], [67.0, 14382.0], [66.0, 14377.0], [65.0, 14424.0], [71.0, 14386.0], [70.0, 14412.0], [68.0, 14405.0], [75.0, 14324.0], [73.0, 14423.0], [72.0, 14378.0], [78.0, 14316.0], [77.0, 14357.0], [76.0, 14320.0], [83.0, 14328.0], [82.0, 14386.0], [81.0, 14387.0], [80.0, 14355.0], [87.0, 14461.0], [86.0, 14270.0], [85.0, 14322.0], [84.0, 14378.0], [91.0, 14255.0], [90.0, 14359.0], [89.0, 14489.0], [88.0, 14491.0], [94.0, 14301.0], [93.0, 14388.0], [99.0, 14324.0], [98.0, 14334.0], [97.0, 14425.0], [96.0, 14296.0], [103.0, 14329.0], [102.0, 14322.0], [101.0, 14325.0], [107.0, 14390.0], [106.0, 14203.0], [105.0, 14191.0], [104.0, 14307.0], [111.0, 14387.0], [110.0, 14251.0], [109.0, 14193.0], [108.0, 14199.0], [115.0, 14340.0], [114.0, 14149.0], [113.0, 14230.0], [112.0, 14239.0], [119.0, 14128.0], [118.0, 14189.0], [117.0, 14397.0], [116.0, 14269.0], [123.0, 14112.0], [122.0, 14366.0], [121.0, 14310.0], [120.0, 14126.0], [127.0, 14173.0], [126.0, 14107.0], [125.0, 14122.0], [124.0, 14314.0], [135.0, 14045.0], [134.0, 14011.0], [133.0, 14220.0], [132.0, 14242.0], [131.0, 14015.0], [130.0, 14263.0], [129.0, 14269.0], [128.0, 14278.0], [143.0, 14121.0], [142.0, 14150.0], [141.0, 14155.0], [140.0, 14110.0], [139.0, 14153.0], [138.0, 14159.0], [137.0, 14190.0], [136.0, 13991.0], [151.0, 13808.0], [150.0, 14012.0], [149.0, 14110.0], [148.0, 14113.0], [147.0, 14120.0], [146.0, 14052.0], [145.0, 14131.0], [144.0, 14101.0], [159.0, 13827.0], [157.0, 13958.0], [156.0, 13892.0], [155.0, 14154.0], [154.0, 13988.0], [153.0, 14042.0], [152.0, 13871.0], [167.0, 13875.0], [166.0, 13926.0], [165.0, 13872.0], [163.0, 13994.5], [162.0, 13971.0], [161.0, 13858.0], [175.0, 13914.0], [173.0, 13879.0], [172.0, 14013.0], [171.0, 13797.0], [170.0, 13800.0], [169.0, 13830.0], [168.0, 13862.0], [183.0, 13759.0], [182.0, 13940.0], [181.0, 13846.0], [180.0, 13847.0], [179.0, 13782.0], [178.0, 13829.0], [177.0, 13920.5], [176.0, 13691.0], [191.0, 13795.0], [190.0, 13816.0], [188.0, 13791.0], [187.0, 13840.0], [186.0, 13803.0], [185.0, 13849.0], [184.0, 13818.0], [199.0, 13921.0], [198.0, 13883.0], [197.0, 13719.0], [196.0, 13746.0], [195.0, 13695.0], [194.0, 13863.0], [192.0, 13743.0], [207.0, 13859.0], [206.0, 13645.0], [205.0, 13617.0], [204.0, 13623.0], [203.0, 13646.0], [202.0, 13672.0], [201.0, 13664.0], [200.0, 13693.0], [215.0, 13632.0], [214.0, 13586.0], [213.0, 13643.0], [212.0, 13617.0], [211.0, 13642.0], [210.0, 13823.0], [209.0, 13635.0], [208.0, 13694.0], [223.0, 13571.0], [222.0, 13688.0], [221.0, 13697.0], [220.0, 13596.0], [219.0, 13603.0], [218.0, 13733.0], [217.0, 13547.0], [216.0, 13612.0], [231.0, 13493.0], [229.0, 13576.0], [228.0, 13430.0], [227.0, 13477.0], [226.0, 13601.0], [225.0, 13645.0], [224.0, 13656.0], [239.0, 13327.0], [238.0, 13596.0], [237.0, 13547.0], [236.0, 13544.0], [234.0, 13388.0], [233.0, 13364.0], [232.0, 13562.0], [247.0, 13408.0], [246.0, 13487.0], [245.0, 13444.0], [244.0, 13498.0], [243.0, 13485.0], [242.0, 13430.0], [241.0, 13438.0], [240.0, 13479.0], [255.0, 13356.0], [253.0, 13363.0], [252.0, 13334.0], [251.0, 13317.0], [250.0, 13232.0], [249.0, 13361.5], [270.0, 13210.5], [271.0, 13184.0], [268.0, 13191.0], [259.0, 13361.0], [258.0, 13190.0], [257.0, 13286.0], [256.0, 13327.0], [267.0, 13237.0], [266.0, 13170.0], [265.0, 13297.0], [264.0, 13189.0], [263.0, 13043.0], [262.0, 13250.0], [261.0, 13250.0], [260.0, 13258.0], [286.0, 13090.0], [287.0, 12997.0], [285.0, 13040.0], [284.0, 13065.0], [282.0, 12853.0], [281.0, 12956.0], [280.0, 13132.0], [279.0, 13167.0], [273.0, 13201.0], [272.0, 13170.0], [275.0, 12967.0], [274.0, 13222.0], [278.0, 13222.0], [277.0, 13198.0], [276.0, 12961.0], [302.0, 12750.0], [303.0, 12778.0], [301.0, 12871.0], [300.0, 12797.0], [298.0, 12816.0], [297.0, 12871.0], [296.0, 12833.0], [295.0, 12881.5], [289.0, 12834.0], [288.0, 13004.0], [291.0, 13000.0], [290.0, 12917.0], [293.0, 12988.0], [292.0, 12984.0], [318.0, 12661.0], [319.0, 12657.0], [317.0, 12636.0], [316.0, 12665.0], [314.0, 12651.0], [313.0, 12654.0], [312.0, 12632.0], [311.0, 12663.0], [305.0, 12773.0], [304.0, 12800.0], [307.0, 12717.0], [306.0, 12722.0], [310.0, 12715.0], [309.0, 12745.0], [308.0, 12801.0], [334.0, 12568.0], [335.0, 12546.0], [333.0, 12553.0], [332.0, 12579.0], [331.0, 12583.0], [330.0, 12562.0], [329.0, 12532.0], [328.0, 12620.5], [326.0, 12614.0], [321.0, 12657.0], [320.0, 12652.0], [323.0, 12616.0], [322.0, 12663.0], [325.0, 12578.0], [324.0, 12613.0], [350.0, 12348.0], [351.0, 12408.0], [349.0, 12438.0], [348.0, 12423.0], [347.0, 12352.0], [346.0, 12433.0], [345.0, 12411.0], [344.0, 12431.0], [343.0, 12487.0], [337.0, 12519.0], [336.0, 12530.0], [339.0, 12530.0], [338.0, 12530.0], [342.0, 12504.0], [341.0, 12520.0], [340.0, 12530.0], [366.0, 12339.0], [367.0, 12304.0], [365.0, 12334.0], [364.0, 12342.0], [363.0, 12357.0], [362.0, 12350.0], [361.0, 12344.0], [359.0, 12360.0], [353.0, 12400.0], [352.0, 12375.0], [355.0, 12407.0], [354.0, 12386.0], [358.0, 12358.0], [357.0, 12359.0], [356.0, 12377.0], [382.0, 12225.0], [383.0, 12252.0], [381.0, 12245.0], [380.0, 12271.0], [379.0, 12275.0], [378.0, 12260.0], [377.0, 12270.0], [376.0, 12276.0], [375.0, 12280.0], [369.0, 12280.0], [368.0, 12309.0], [371.0, 12277.0], [370.0, 12289.0], [374.0, 12293.0], [373.0, 12287.0], [372.0, 12297.0], [398.0, 12180.0], [399.0, 12207.0], [397.0, 12201.0], [396.0, 12206.0], [395.0, 12197.0], [393.0, 12200.0], [392.0, 12226.0], [391.0, 12241.0], [385.0, 12261.0], [384.0, 12259.0], [387.0, 12244.0], [386.0, 12236.0], [390.0, 12231.0], [389.0, 12229.0], [388.0, 12243.0], [413.0, 11954.0], [415.0, 12018.0], [412.0, 12045.0], [403.0, 12125.0], [402.0, 12447.0], [401.0, 12147.0], [400.0, 12156.0], [411.0, 12041.0], [410.0, 12046.0], [409.0, 12052.0], [407.0, 12078.0], [406.0, 12058.5], [404.0, 12080.0], [430.0, 11797.0], [431.0, 11888.0], [429.0, 11827.0], [428.0, 12179.0], [427.0, 11818.0], [426.0, 11816.0], [425.0, 11825.0], [424.0, 11830.0], [423.0, 11835.0], [416.0, 11916.5], [418.0, 11876.0], [417.0, 11884.0], [422.0, 11840.0], [421.0, 11809.0], [420.0, 11947.5], [446.0, 11594.0], [447.0, 11532.0], [445.0, 11685.0], [444.0, 11663.0], [443.0, 11632.0], [442.0, 11641.0], [441.0, 11649.0], [440.0, 11674.0], [439.0, 11710.0], [435.0, 11747.0], [434.0, 11800.0], [433.0, 11781.0], [438.0, 11707.0], [462.0, 11353.0], [463.0, 11190.0], [461.0, 11305.0], [460.0, 11235.0], [459.0, 11264.0], [458.0, 11406.0], [457.0, 11296.0], [456.0, 11357.0], [455.0, 11441.0], [449.0, 11413.0], [448.0, 11447.0], [451.0, 11416.0], [450.0, 11409.0], [453.0, 11493.0], [452.0, 11614.0], [478.0, 11138.0], [479.0, 11100.0], [477.0, 11202.0], [467.0, 11200.0], [466.0, 11180.0], [465.0, 11324.0], [475.0, 11180.0], [474.0, 11102.0], [473.0, 11906.0], [472.0, 11133.0], [471.0, 11118.0], [470.0, 11425.0], [469.0, 11325.0], [468.0, 11199.0], [494.0, 11004.0], [495.0, 11014.0], [493.0, 10927.0], [492.0, 10821.0], [491.0, 11053.0], [490.0, 10879.0], [489.0, 10987.0], [488.0, 11003.0], [487.0, 10998.0], [480.0, 11048.0], [483.0, 11056.0], [482.0, 10985.5], [486.0, 10897.0], [485.0, 11013.0], [484.0, 10939.0], [509.0, 10907.0], [511.0, 10870.5], [508.0, 11080.0], [499.0, 10789.0], [498.0, 10943.5], [496.0, 10797.0], [507.0, 10952.0], [506.0, 10787.0], [505.0, 10894.0], [504.0, 10915.0], [503.0, 11027.0], [502.0, 10977.0], [501.0, 10895.0], [500.0, 10872.0], [536.0, 10694.0], [541.0, 10532.0], [543.0, 10655.5], [528.0, 10673.0], [530.0, 11154.0], [529.0, 10682.0], [540.0, 10905.0], [538.0, 10717.0], [537.0, 10615.0], [527.0, 10805.0], [513.0, 10824.0], [512.0, 10681.0], [515.0, 10756.0], [514.0, 11464.0], [517.0, 10709.0], [516.0, 10771.0], [519.0, 10801.0], [518.0, 10770.0], [526.0, 10755.0], [525.0, 11353.0], [524.0, 11340.0], [523.0, 10577.0], [522.0, 10776.0], [521.0, 10942.0], [520.0, 10813.0], [535.0, 11247.0], [533.0, 10682.0], [532.0, 11265.0], [531.0, 10672.0], [569.0, 10994.0], [574.0, 10339.0], [575.0, 10884.0], [560.0, 10656.0], [562.0, 11063.0], [561.0, 10436.0], [564.0, 10396.0], [563.0, 11028.0], [573.0, 10644.0], [571.0, 10994.0], [570.0, 10300.0], [568.0, 10980.0], [551.0, 10729.0], [549.0, 10957.0], [548.0, 10641.0], [547.0, 10603.0], [546.0, 10624.0], [545.0, 11153.0], [544.0, 11190.0], [558.0, 10511.0], [557.0, 10677.0], [556.0, 10499.0], [555.0, 10813.5], [554.0, 11122.0], [552.0, 10436.0], [567.0, 10305.0], [565.0, 10383.0], [604.0, 10071.0], [607.0, 10641.0], [592.0, 10590.0], [594.0, 10766.0], [593.0, 10184.0], [597.0, 10720.0], [596.0, 10344.0], [606.0, 10032.0], [605.0, 10040.0], [603.0, 10074.0], [602.0, 10711.0], [601.0, 10708.0], [600.0, 10706.0], [591.0, 10791.0], [578.0, 10894.0], [577.0, 10853.5], [580.0, 10455.0], [579.0, 10234.0], [583.0, 10555.0], [581.0, 10883.0], [590.0, 10145.0], [589.0, 10317.0], [588.0, 10189.0], [587.0, 10208.0], [586.0, 10655.0], [585.0, 10833.0], [584.0, 10676.0], [599.0, 9960.0], [598.0, 10734.0], [633.0, 10418.0], [638.0, 10143.0], [639.0, 10262.0], [625.0, 10463.0], [624.0, 10517.0], [627.0, 10198.0], [626.0, 10465.0], [629.0, 9887.0], [628.0, 10469.0], [637.0, 9709.0], [636.0, 10090.0], [634.0, 10420.0], [632.0, 10233.0], [615.0, 10348.0], [614.0, 10494.5], [612.0, 10568.0], [611.0, 10583.0], [610.0, 10596.0], [609.0, 10608.0], [608.0, 10644.0], [623.0, 10340.0], [622.0, 10132.0], [621.0, 10137.0], [620.0, 10577.5], [618.0, 10152.0], [617.0, 10343.0], [616.0, 10564.0], [631.0, 9842.0], [630.0, 9876.0], [670.0, 9577.0], [660.0, 9849.0], [671.0, 9486.666666666666], [657.0, 9784.0], [656.0, 9868.0], [659.0, 9919.0], [658.0, 10008.0], [667.0, 9815.0], [665.0, 9206.0], [664.0, 9825.0], [647.0, 10100.0], [646.0, 10174.0], [645.0, 10150.0], [644.0, 9649.0], [643.0, 10044.0], [642.0, 9927.5], [640.0, 9821.0], [655.0, 10003.0], [654.0, 10079.0], [653.0, 10088.0], [652.0, 9963.0], [651.0, 9872.0], [650.0, 10083.0], [649.0, 9523.0], [648.0, 9776.0], [663.0, 9847.0], [662.0, 9274.0], [661.0, 9252.0], [696.0, 9446.5], [700.0, 9529.0], [703.0, 9405.0], [690.0, 9652.0], [688.0, 9639.0], [692.0, 9102.0], [691.0, 9467.0], [702.0, 8967.0], [701.0, 8967.0], [699.0, 9406.0], [698.0, 9228.0], [697.0, 9014.0], [687.0, 9655.0], [673.0, 9655.0], [672.0, 9460.0], [675.0, 9623.0], [674.0, 9775.0], [677.0, 9516.0], [676.0, 9557.0], [679.0, 9580.0], [678.0, 9734.0], [686.0, 9520.0], [684.0, 9410.0], [683.0, 9108.0], [682.0, 9704.0], [681.0, 9516.0], [680.0, 9604.0], [695.0, 9618.0], [694.0, 9621.0], [729.0, 9120.0], [733.0, 9358.0], [734.0, 9338.0], [720.0, 9410.0], [723.0, 8812.0], [722.0, 9118.5], [725.0, 9089.0], [724.0, 8968.0], [732.0, 9072.0], [731.0, 9367.0], [730.0, 9159.0], [728.0, 9113.0], [711.0, 9460.0], [710.0, 9469.0], [709.0, 9235.0], [708.0, 9386.0], [707.0, 9521.0], [706.0, 9300.5], [704.0, 9517.0], [719.0, 9393.0], [718.0, 9417.0], [717.0, 9156.0], [716.0, 9244.0], [715.0, 8905.0], [714.0, 9227.0], [713.0, 8917.0], [727.0, 9196.0], [726.0, 9379.0], [766.0, 8963.0], [767.0, 8667.0], [753.0, 9202.0], [752.0, 8904.25], [764.0, 9086.0], [763.0, 8877.0], [762.0, 9026.5], [760.0, 8929.0], [750.0, 8944.0], [738.0, 8889.5], [736.0, 9212.5], [742.0, 8924.0], [739.0, 9316.0], [749.0, 9205.0], [746.0, 8913.5], [744.0, 9079.0], [758.0, 8875.0], [757.0, 8997.0], [756.0, 8988.5], [754.0, 9200.0], [792.0, 8254.0], [796.0, 8307.0], [799.0, 8360.0], [784.0, 8821.0], [787.0, 8458.0], [785.0, 8266.0], [798.0, 8433.0], [797.0, 8760.0], [795.0, 8788.0], [794.0, 8233.0], [793.0, 8792.0], [783.0, 8477.0], [768.0, 9078.0], [770.0, 9035.0], [769.0, 8739.0], [772.0, 8877.0], [771.0, 8767.0], [775.0, 8833.0], [773.0, 8392.0], [782.0, 8335.0], [781.0, 8556.0], [780.0, 8593.0], [779.0, 8640.0], [778.0, 8848.0], [777.0, 8820.0], [791.0, 8589.5], [789.0, 8625.5], [828.0, 8474.0], [831.0, 8078.0], [817.0, 8030.0], [816.0, 8588.0], [819.0, 8135.0], [818.0, 8547.0], [821.0, 8466.0], [820.0, 8521.0], [830.0, 8436.0], [829.0, 8462.0], [827.0, 7893.0], [826.0, 8235.0], [825.0, 7945.0], [824.0, 8068.0], [815.0, 8128.0], [801.0, 8441.0], [800.0, 8358.0], [803.0, 8693.0], [802.0, 8384.0], [805.0, 8136.0], [804.0, 8351.0], [807.0, 8123.0], [806.0, 8657.0], [814.0, 8276.0], [813.0, 8577.0], [812.0, 8344.0], [811.0, 8525.0], [809.0, 8593.0], [808.0, 8098.0], [823.0, 7973.0], [822.0, 8480.0], [856.0, 7774.5], [860.0, 7311.0], [863.0, 7075.0], [850.0, 7972.0], [849.0, 7723.0], [852.0, 7513.0], [851.0, 7437.0], [862.0, 7634.0], [861.0, 7661.0], [859.0, 7284.0], [858.0, 7422.0], [857.0, 7849.0], [847.0, 7984.0], [833.0, 8362.0], [832.0, 8214.0], [835.0, 8289.0], [834.0, 7983.0], [837.0, 7709.0], [836.0, 7958.0], [839.0, 7689.0], [838.0, 7705.0], [846.0, 8002.0], [845.0, 7984.0], [844.0, 8055.0], [843.0, 8032.0], [842.0, 7882.0], [841.0, 7785.0], [840.0, 8215.0], [854.0, 7367.0], [853.0, 7406.0], [892.0, 7354.0], [895.0, 7298.0], [881.0, 7528.0], [880.0, 7323.0], [883.0, 7378.0], [882.0, 7357.0], [885.0, 7475.0], [884.0, 7525.0], [894.0, 7056.0], [893.0, 7335.0], [891.0, 7400.0], [890.0, 7395.0], [889.0, 7406.0], [888.0, 6987.0], [879.0, 7449.5], [865.0, 7596.0], [864.0, 7585.0], [867.0, 7095.0], [866.0, 7578.0], [869.0, 7096.0], [868.0, 7373.0], [871.0, 7354.0], [870.0, 7509.0], [877.0, 7517.0], [875.0, 7007.0], [874.0, 7531.0], [873.0, 7450.0], [887.0, 7444.0], [886.0, 7331.0], [920.0, 6724.0], [926.0, 7057.0], [927.0, 6994.0], [912.0, 6991.0], [914.0, 6981.0], [913.0, 6721.0], [924.0, 7127.0], [923.0, 7007.5], [921.0, 6608.0], [911.0, 7200.0], [897.0, 7289.0], [896.0, 6872.0], [899.0, 7304.0], [898.0, 7284.0], [901.0, 7283.0], [900.0, 7046.0], [903.0, 6729.0], [902.0, 7249.0], [910.0, 7010.0], [909.0, 7066.0], [908.0, 7026.0], [907.0, 6726.0], [906.0, 7245.0], [905.0, 7276.0], [904.0, 7247.0], [919.0, 7047.0], [918.0, 6722.0], [917.0, 7187.0], [916.0, 7112.0], [952.0, 6726.5], [956.0, 6826.0], [959.0, 6413.0], [944.0, 6985.0], [947.0, 6976.0], [946.0, 6992.333333333333], [958.0, 6949.0], [957.0, 6805.0], [955.0, 6952.0], [954.0, 6965.0], [953.0, 6723.0], [943.0, 6921.5], [929.0, 7102.5], [931.0, 7103.0], [930.0, 6641.0], [933.0, 6954.0], [932.0, 6887.0], [935.0, 7037.0], [934.0, 7048.0], [940.0, 6989.0], [939.0, 6744.0], [938.0, 6716.0], [937.0, 6780.0], [936.0, 6478.0], [950.0, 6968.5], [948.0, 6970.0], [988.0, 6398.0], [991.0, 6368.0], [977.0, 6556.0], [976.0, 6817.0], [979.0, 6761.0], [978.0, 6795.0], [981.0, 6518.0], [980.0, 6525.0], [990.0, 6410.0], [989.0, 6628.0], [987.0, 6634.0], [986.0, 6432.0], [985.0, 6426.0], [984.0, 6690.0], [975.0, 6688.0], [961.0, 6748.0], [960.0, 6924.0], [963.0, 6903.0], [962.0, 6707.0], [965.0, 6877.0], [964.0, 6905.0], [967.0, 6893.0], [966.0, 6913.0], [974.0, 6595.0], [973.0, 6559.0], [972.0, 6702.0], [971.0, 6838.0], [970.0, 6868.0], [969.0, 6732.0], [968.0, 6871.0], [983.0, 6536.0], [982.0, 6412.0], [1020.0, 6225.0], [995.0, 3612.0], [994.0, 6376.0], [993.0, 6363.0], [992.0, 6498.0], [997.0, 6391.0], [996.0, 6111.0], [999.0, 6279.0], [998.0, 6521.0], [1007.0, 6150.0], [1005.0, 6375.0], [1004.0, 6191.5], [1002.0, 6406.0], [1001.0, 6435.0], [1023.0, 6071.0], [1008.0, 6304.0], [1011.0, 6353.0], [1010.0, 6340.5], [1013.0, 6289.0], [1012.0, 6214.0], [1015.0, 6266.0], [1014.0, 6268.0], [1022.0, 6043.0], [1021.0, 6226.0], [1019.0, 6145.0], [1018.0, 6152.0], [1017.0, 6023.0], [1016.0, 6255.0], [1084.0, 5250.0], [1056.0, 5899.0], [1058.0, 5668.0], [1060.0, 5652.0], [1062.0, 5555.0], [1064.0, 5576.0], [1066.0, 5507.0], [1068.0, 5637.0], [1070.0, 5624.0], [1086.0, 5283.0], [1080.0, 5466.0], [1078.0, 5288.0], [1076.0, 5575.0], [1074.0, 5335.0], [1072.0, 5600.0], [1038.0, 6065.0], [1036.0, 6086.0], [1034.0, 5965.0], [1032.0, 5840.5], [1030.0, 5817.0], [1028.0, 6157.0], [1026.0, 6193.0], [1024.0, 6223.0], [1054.0, 5897.0], [1052.0, 5793.0], [1050.0, 5923.0], [1048.0, 5952.0], [1044.0, 5504.0], [1042.0, 6042.0], [1040.0, 6045.0], [1144.0, 4935.0], [1140.0, 4969.5], [1148.0, 4456.0], [1120.0, 5130.0], [1122.0, 5147.0], [1124.0, 4928.0], [1126.0, 5084.0], [1128.0, 4910.0], [1130.0, 4697.0], [1132.0, 4751.0], [1134.0, 4983.0], [1150.0, 4895.0], [1146.0, 4683.0], [1142.0, 4958.0], [1138.0, 4459.0], [1136.0, 4990.5], [1102.0, 5298.0], [1100.0, 5287.0], [1098.0, 5323.0], [1096.0, 5172.0], [1094.0, 4844.0], [1092.0, 5119.0], [1090.0, 5368.0], [1088.0, 5391.0], [1116.0, 5064.0], [1114.0, 4936.0], [1112.0, 4962.0], [1108.0, 5186.0], [1106.0, 4933.0], [1104.0, 5263.0], [1212.0, 4205.0], [1192.0, 4455.0], [1184.0, 4556.0], [1186.0, 4395.0], [1188.0, 4042.0], [1190.0, 4049.0], [1194.0, 4315.0], [1196.0, 4216.0], [1198.0, 4093.0], [1214.0, 4235.0], [1210.0, 4276.0], [1204.0, 4282.0], [1202.0, 4069.0], [1164.0, 4434.0], [1162.0, 4788.0], [1160.0, 4806.0], [1158.0, 4821.0], [1156.0, 4837.0], [1154.0, 4827.0], [1152.0, 4885.0], [1182.0, 4567.0], [1178.0, 4487.5], [1176.0, 4487.0], [1174.0, 4427.0], [1170.0, 4614.0], [1168.0, 4649.0], [1274.0, 1434.0], [1256.0, 3919.0], [1248.0, 3683.0], [1252.0, 3840.6666666666665], [1254.0, 3927.0], [1258.0, 3702.0], [1260.0, 3555.0], [1262.0, 3653.0], [1276.0, 3454.0], [1270.0, 3305.0], [1264.0, 3393.0], [1228.0, 4173.0], [1226.0, 4205.0], [1222.0, 3974.0], [1216.0, 4215.0], [1246.0, 3680.0], [1244.0, 3980.0], [1240.0, 3707.0], [1238.0, 3993.0], [1236.0, 3920.5], [1232.0, 4088.0], [1332.0, 2666.0], [1320.0, 2333.0], [1312.0, 2460.0], [1316.0, 2621.0], [1322.0, 2699.0], [1324.0, 2705.0], [1326.0, 2345.0], [1342.0, 2288.0], [1338.0, 2347.0], [1334.0, 2617.0], [1330.0, 2655.0], [1328.0, 2672.0], [1280.0, 3414.0], [1282.0, 3286.0], [1284.0, 2859.0], [1286.0, 2879.0], [1290.0, 2918.5], [1288.0, 2827.0], [1292.0, 3114.0], [1294.0, 3111.0], [1310.0, 2477.0], [1304.0, 2428.0], [1302.0, 2849.5], [1300.0, 2683.0], [1298.0, 3056.0], [1296.0, 3067.0], [1396.0, 2081.0], [1398.0, 2369.0], [1404.0, 2231.5], [1376.0, 2200.0], [1378.0, 2257.0], [1382.0, 2318.0], [1380.0, 2455.5], [1384.0, 2048.0], [1386.0, 2043.0], [1388.0, 2042.0], [1406.0, 2024.0], [1394.0, 2281.0], [1392.0, 2418.0], [1358.0, 2345.0], [1356.0, 2227.0], [1354.0, 2231.0], [1352.0, 2267.0], [1350.0, 2235.0], [1348.0, 2239.5], [1346.0, 2203.0], [1344.0, 2590.0], [1372.0, 2477.0], [1368.0, 2164.0], [1366.0, 2195.0], [1364.0, 2195.0], [1362.0, 2357.5], [1360.0, 2368.5], [1414.0, 2019.0], [1458.0, 1955.0], [1448.0, 1775.0], [1450.0, 1802.0], [1452.0, 1682.5], [1454.0, 1769.0], [1446.0, 1297.0], [1460.0, 2065.0], [1456.0, 1803.0], [1408.0, 1922.0], [1412.0, 1996.0], [1410.0, 2007.0], [1416.0, 1902.0], [1420.0, 1995.0], [1422.0, 1990.0], [1438.0, 2204.0], [1436.0, 1796.0], [1434.0, 1901.0], [1432.0, 1927.0], [1430.0, 1933.0], [1428.0, 1943.0], [1426.0, 1955.0], [1440.0, 1880.0], [1442.0, 2191.0], [1444.0, 2184.0], [1464.0, 1664.0], [1462.0, 1655.0], [1474.0, 1623.0], [1484.0, 1471.0], [1492.0, 1058.0], [1476.0, 1721.0], [1480.0, 1625.0], [1478.0, 1712.0], [1490.0, 1089.0], [1488.0, 1095.0], [1486.0, 1478.0], [1083.0, 5064.0], [1075.0, 5535.0], [1087.0, 5397.0], [1057.0, 5628.0], [1059.0, 5665.0], [1061.0, 5788.0], [1063.0, 5634.0], [1065.0, 5390.0], [1067.0, 5631.0], [1069.0, 5619.0], [1071.0, 5621.0], [1085.0, 5145.0], [1081.0, 5486.0], [1079.0, 5514.0], [1077.0, 5558.0], [1073.0, 5596.0], [1039.0, 5613.0], [1035.0, 6064.0], [1033.0, 5861.0], [1029.0, 6146.0], [1027.0, 6189.0], [1025.0, 5682.0], [1055.0, 5642.0], [1053.0, 5658.0], [1049.0, 5938.0], [1047.0, 5878.0], [1045.0, 5997.0], [1043.0, 6009.0], [1041.0, 6037.0], [1149.0, 4442.0], [1151.0, 4885.0], [1121.0, 5127.0], [1123.0, 5151.0], [1125.0, 5099.0], [1127.0, 5041.0], [1129.0, 5025.0], [1131.0, 5000.0], [1133.0, 4718.0], [1147.0, 4906.0], [1145.0, 4915.0], [1143.0, 4944.0], [1141.0, 4531.0], [1137.0, 4987.0], [1103.0, 4862.0], [1101.0, 5291.0], [1097.0, 5338.0], [1095.0, 5171.0], [1093.0, 5084.0], [1091.0, 5357.0], [1089.0, 5379.0], [1119.0, 5148.5], [1117.0, 5149.0], [1113.0, 5090.0], [1111.0, 5151.0], [1109.0, 5172.0], [1107.0, 5158.0], [1105.0, 5164.0], [1213.0, 4242.0], [1215.0, 3995.0], [1185.0, 4566.0], [1187.0, 4106.0], [1189.0, 4473.0], [1191.0, 4347.0], [1193.0, 4035.0], [1195.0, 4205.0], [1197.0, 4191.0], [1199.0, 4348.0], [1211.0, 4248.0], [1209.0, 4163.5], [1207.0, 4163.5], [1205.0, 4288.0], [1203.0, 4293.0], [1201.0, 4217.5], [1167.0, 4565.5], [1165.0, 4667.0], [1163.0, 4669.0], [1161.0, 4793.0], [1159.0, 4805.0], [1157.0, 4844.0], [1153.0, 4834.0], [1183.0, 4571.0], [1181.0, 4503.0], [1179.0, 4593.0], [1175.0, 4640.0], [1173.0, 4528.0], [1171.0, 4635.0], [1169.0, 4624.0], [1273.0, 3394.0], [1269.0, 3547.5], [1279.0, 3353.0], [1249.0, 3692.0], [1253.0, 3939.0], [1255.0, 3914.0], [1257.0, 3887.0], [1259.0, 3613.0], [1261.0, 3624.0], [1263.0, 3786.0], [1275.0, 3184.0], [1271.0, 3289.0], [1267.0, 3553.5], [1265.0, 3339.0], [1231.0, 3900.5], [1229.0, 4113.0], [1227.0, 4081.0], [1225.0, 4161.333333333333], [1223.0, 4213.0], [1221.0, 3969.0], [1219.0, 3983.5], [1217.0, 4032.0], [1247.0, 3666.0], [1245.0, 3684.0], [1243.0, 3907.0], [1241.0, 3743.0], [1239.0, 3992.0], [1237.0, 4006.0], [1235.0, 3906.0], [1233.0, 4021.0], [1339.0, 2197.0], [1343.0, 2218.0], [1313.0, 2736.0], [1315.0, 2560.5], [1319.0, 2348.0], [1317.0, 2748.0], [1321.0, 2407.0], [1323.0, 2719.0], [1325.0, 2707.0], [1327.0, 2659.0], [1341.0, 2450.5], [1337.0, 2351.5], [1331.0, 2321.0], [1329.0, 2235.0], [1311.0, 2739.0], [1281.0, 3299.0], [1283.0, 2958.0], [1285.0, 2993.0], [1287.0, 3170.0], [1291.0, 3123.0], [1293.0, 2777.0], [1309.0, 2406.0], [1307.0, 2485.0], [1305.0, 2811.0], [1303.0, 2608.0], [1299.0, 3036.0], [1297.0, 2979.5], [1401.0, 2038.0], [1383.0, 2145.0], [1377.0, 758.0], [1385.0, 2137.0], [1387.0, 2171.0], [1391.0, 2430.5], [1389.0, 2440.0], [1407.0, 1915.0], [1403.0, 2192.0], [1399.0, 2374.0], [1397.0, 2400.0], [1395.0, 2145.0], [1355.0, 2115.0], [1353.0, 2154.0], [1345.0, 2497.0], [1375.0, 2310.0], [1373.0, 2198.6666666666665], [1367.0, 2514.0], [1365.0, 2505.0], [1415.0, 1996.0], [1469.0, 1864.5], [1447.0, 1171.6666666666667], [1449.0, 2087.0], [1453.0, 2087.0], [1455.0, 2082.0], [1461.0, 1481.5], [1459.0, 1709.0], [1457.0, 1751.0], [1439.0, 1888.0], [1409.0, 1921.0], [1413.0, 1933.0], [1419.0, 1956.0], [1417.0, 1888.0], [1421.0, 1906.0], [1423.0, 1895.0], [1437.0, 2188.0], [1435.0, 2193.0], [1433.0, 2238.0], [1431.0, 1946.0], [1429.0, 1944.0], [1427.0, 1957.0], [1425.0, 1887.0], [1471.0, 1760.6666666666667], [1441.0, 2181.0], [1443.0, 1863.0], [1445.0, 1893.0], [1467.0, 1620.0], [1465.0, 1618.0], [1475.0, 2051.0], [1473.0, 1631.0], [1477.0, 1687.0], [1491.0, 1079.0], [1489.0, 1160.0], [1487.0, 1224.0], [1485.0, 1437.0], [1483.0, 1505.0], [1481.0, 1827.5], [1.0, 14484.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[749.8386666666662, 8551.580000000005]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1492.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3250.0, "minX": 1.73302014E12, "maxY": 13171.3, "series": [{"data": [[1.73302014E12, 13171.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73302014E12, 3250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302014E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8551.580000000005, "minX": 1.73302014E12, "maxY": 8551.580000000005, "series": [{"data": [[1.73302014E12, 8551.580000000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302014E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8551.536666666658, "minX": 1.73302014E12, "maxY": 8551.536666666658, "series": [{"data": [[1.73302014E12, 8551.536666666658]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302014E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 84.48266666666676, "minX": 1.73302014E12, "maxY": 84.48266666666676, "series": [{"data": [[1.73302014E12, 84.48266666666676]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302014E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 509.0, "minX": 1.73302014E12, "maxY": 14664.0, "series": [{"data": [[1.73302014E12, 14664.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73302014E12, 14014.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73302014E12, 14487.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73302014E12, 14389.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73302014E12, 509.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73302014E12, 8944.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302014E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 658.0, "minX": 1.0, "maxY": 14153.0, "series": [{"data": [[145.0, 14153.0], [176.0, 2145.0], [47.0, 3067.0], [13.0, 913.0], [58.0, 11550.5], [1.0, 658.0], [67.0, 11614.0], [83.0, 7948.0], [90.0, 13362.5], [100.0, 4637.5], [114.0, 10822.5], [121.0, 7002.0], [120.0, 12381.5], [124.0, 9053.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 176.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 637.0, "minX": 1.0, "maxY": 14153.0, "series": [{"data": [[145.0, 14153.0], [176.0, 2145.0], [47.0, 3067.0], [13.0, 913.0], [58.0, 11550.5], [1.0, 637.0], [67.0, 11614.0], [83.0, 7948.0], [90.0, 13362.5], [100.0, 4637.5], [114.0, 10822.5], [121.0, 7002.0], [120.0, 12381.5], [124.0, 9053.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 176.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73302014E12, "maxY": 25.0, "series": [{"data": [[1.73302014E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302014E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73302014E12, "maxY": 25.0, "series": [{"data": [[1.73302014E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302014E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73302014E12, "maxY": 25.0, "series": [{"data": [[1.73302014E12, 25.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302014E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73302014E12, "maxY": 25.0, "series": [{"data": [[1.73302014E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302014E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

