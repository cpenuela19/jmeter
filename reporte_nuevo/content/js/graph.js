/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 381.0, "minX": 0.0, "maxY": 15756.0, "series": [{"data": [[0.0, 381.0], [0.1, 535.0], [0.2, 670.0], [0.3, 874.0], [0.4, 962.0], [0.5, 1020.0], [0.6, 1147.0], [0.7, 1179.0], [0.8, 1228.0], [0.9, 1267.0], [1.0, 1335.0], [1.1, 1339.0], [1.2, 1350.0], [1.3, 1351.0], [1.4, 1364.0], [1.5, 1370.0], [1.6, 1459.0], [1.7, 1477.0], [1.8, 1509.0], [1.9, 1521.0], [2.0, 1545.0], [2.1, 1547.0], [2.2, 1575.0], [2.3, 1583.0], [2.4, 1598.0], [2.5, 1602.0], [2.6, 1605.0], [2.7, 1619.0], [2.8, 1620.0], [2.9, 1650.0], [3.0, 1689.0], [3.1, 1694.0], [3.2, 1700.0], [3.3, 1709.0], [3.4, 1711.0], [3.5, 1739.0], [3.6, 1739.0], [3.7, 1768.0], [3.8, 1791.0], [3.9, 1793.0], [4.0, 1795.0], [4.1, 1809.0], [4.2, 1815.0], [4.3, 1847.0], [4.4, 1847.0], [4.5, 1852.0], [4.6, 1855.0], [4.7, 1858.0], [4.8, 1859.0], [4.9, 1869.0], [5.0, 1871.0], [5.1, 1881.0], [5.2, 1882.0], [5.3, 1900.0], [5.4, 1910.0], [5.5, 1917.0], [5.6, 1922.0], [5.7, 1922.0], [5.8, 1923.0], [5.9, 1924.0], [6.0, 1927.0], [6.1, 1930.0], [6.2, 1941.0], [6.3, 1943.0], [6.4, 1951.0], [6.5, 1951.0], [6.6, 1953.0], [6.7, 1964.0], [6.8, 1975.0], [6.9, 1978.0], [7.0, 1990.0], [7.1, 1991.0], [7.2, 1997.0], [7.3, 1999.0], [7.4, 2017.0], [7.5, 2023.0], [7.6, 2026.0], [7.7, 2028.0], [7.8, 2031.0], [7.9, 2042.0], [8.0, 2054.0], [8.1, 2056.0], [8.2, 2090.0], [8.3, 2096.0], [8.4, 2109.0], [8.5, 2114.0], [8.6, 2143.0], [8.7, 2143.0], [8.8, 2149.0], [8.9, 2163.0], [9.0, 2174.0], [9.1, 2174.0], [9.2, 2181.0], [9.3, 2192.0], [9.4, 2211.0], [9.5, 2220.0], [9.6, 2272.0], [9.7, 2272.0], [9.8, 2279.0], [9.9, 2292.0], [10.0, 2298.0], [10.1, 2306.0], [10.2, 2309.0], [10.3, 2315.0], [10.4, 2351.0], [10.5, 2355.0], [10.6, 2367.0], [10.7, 2367.0], [10.8, 2380.0], [10.9, 2393.0], [11.0, 2404.0], [11.1, 2415.0], [11.2, 2443.0], [11.3, 2443.0], [11.4, 2457.0], [11.5, 2459.0], [11.6, 2466.0], [11.7, 2467.0], [11.8, 2492.0], [11.9, 2498.0], [12.0, 2543.0], [12.1, 2547.0], [12.2, 2613.0], [12.3, 2617.0], [12.4, 2682.0], [12.5, 2693.0], [12.6, 2768.0], [12.7, 2858.0], [12.8, 2880.0], [12.9, 2885.0], [13.0, 2894.0], [13.1, 2929.0], [13.2, 2949.0], [13.3, 2985.0], [13.4, 3000.0], [13.5, 3012.0], [13.6, 3055.0], [13.7, 3057.0], [13.8, 3067.0], [13.9, 3147.0], [14.0, 3179.0], [14.1, 3243.0], [14.2, 3309.0], [14.3, 3408.0], [14.4, 3468.0], [14.5, 3486.0], [14.6, 3514.0], [14.7, 3517.0], [14.8, 3546.0], [14.9, 3554.0], [15.0, 3571.0], [15.1, 3576.0], [15.2, 3596.0], [15.3, 3608.0], [15.4, 3645.0], [15.5, 3656.0], [15.6, 3659.0], [15.7, 3677.0], [15.8, 3682.0], [15.9, 3699.0], [16.0, 3712.0], [16.1, 3712.0], [16.2, 3744.0], [16.3, 3874.0], [16.4, 3913.0], [16.5, 3914.0], [16.6, 3953.0], [16.7, 3961.0], [16.8, 3988.0], [16.9, 4001.0], [17.0, 4011.0], [17.1, 4013.0], [17.2, 4016.0], [17.3, 4026.0], [17.4, 4043.0], [17.5, 4044.0], [17.6, 4073.0], [17.7, 4076.0], [17.8, 4083.0], [17.9, 4096.0], [18.0, 4112.0], [18.1, 4114.0], [18.2, 4132.0], [18.3, 4136.0], [18.4, 4210.0], [18.5, 4257.0], [18.6, 4293.0], [18.7, 4306.0], [18.8, 4314.0], [18.9, 4322.0], [19.0, 4334.0], [19.1, 4340.0], [19.2, 4379.0], [19.3, 4404.0], [19.4, 4432.0], [19.5, 4439.0], [19.6, 4452.0], [19.7, 4457.0], [19.8, 4473.0], [19.9, 4475.0], [20.0, 4480.0], [20.1, 4483.0], [20.2, 4493.0], [20.3, 4496.0], [20.4, 4506.0], [20.5, 4511.0], [20.6, 4558.0], [20.7, 4575.0], [20.8, 4586.0], [20.9, 4633.0], [21.0, 4677.0], [21.1, 4691.0], [21.2, 4696.0], [21.3, 4719.0], [21.4, 4722.0], [21.5, 4736.0], [21.6, 4769.0], [21.7, 4784.0], [21.8, 4793.0], [21.9, 4797.0], [22.0, 4799.0], [22.1, 4805.0], [22.2, 4816.0], [22.3, 4817.0], [22.4, 4828.0], [22.5, 4829.0], [22.6, 4851.0], [22.7, 4855.0], [22.8, 4864.0], [22.9, 4894.0], [23.0, 4899.0], [23.1, 4899.0], [23.2, 4940.0], [23.3, 4945.0], [23.4, 4954.0], [23.5, 4957.0], [23.6, 4986.0], [23.7, 5005.0], [23.8, 5015.0], [23.9, 5023.0], [24.0, 5034.0], [24.1, 5036.0], [24.2, 5039.0], [24.3, 5040.0], [24.4, 5058.0], [24.5, 5063.0], [24.6, 5075.0], [24.7, 5094.0], [24.8, 5107.0], [24.9, 5126.0], [25.0, 5143.0], [25.1, 5143.0], [25.2, 5170.0], [25.3, 5172.0], [25.4, 5179.0], [25.5, 5182.0], [25.6, 5233.0], [25.7, 5261.0], [25.8, 5264.0], [25.9, 5266.0], [26.0, 5312.0], [26.1, 5312.0], [26.2, 5326.0], [26.3, 5332.0], [26.4, 5342.0], [26.5, 5343.0], [26.6, 5365.0], [26.7, 5368.0], [26.8, 5374.0], [26.9, 5383.0], [27.0, 5392.0], [27.1, 5392.0], [27.2, 5404.0], [27.3, 5405.0], [27.4, 5429.0], [27.5, 5429.0], [27.6, 5453.0], [27.7, 5456.0], [27.8, 5476.0], [27.9, 5488.0], [28.0, 5520.0], [28.1, 5540.0], [28.2, 5613.0], [28.3, 5616.0], [28.4, 5664.0], [28.5, 5687.0], [28.6, 5695.0], [28.7, 5703.0], [28.8, 5721.0], [28.9, 5730.0], [29.0, 5736.0], [29.1, 5756.0], [29.2, 5778.0], [29.3, 5781.0], [29.4, 5800.0], [29.5, 5805.0], [29.6, 5811.0], [29.7, 5834.0], [29.8, 5846.0], [29.9, 5870.0], [30.0, 5906.0], [30.1, 5929.0], [30.2, 5936.0], [30.3, 5938.0], [30.4, 5971.0], [30.5, 5976.0], [30.6, 5998.0], [30.7, 6012.0], [30.8, 6029.0], [30.9, 6029.0], [31.0, 6034.0], [31.1, 6064.0], [31.2, 6075.0], [31.3, 6098.0], [31.4, 6103.0], [31.5, 6117.0], [31.6, 6133.0], [31.7, 6143.0], [31.8, 6153.0], [31.9, 6156.0], [32.0, 6158.0], [32.1, 6184.0], [32.2, 6189.0], [32.3, 6191.0], [32.4, 6226.0], [32.5, 6251.0], [32.6, 6264.0], [32.7, 6269.0], [32.8, 6281.0], [32.9, 6304.0], [33.0, 6305.0], [33.1, 6309.0], [33.2, 6331.0], [33.3, 6346.0], [33.4, 6359.0], [33.5, 6361.0], [33.6, 6390.0], [33.7, 6397.0], [33.8, 6401.0], [33.9, 6405.0], [34.0, 6412.0], [34.1, 6426.0], [34.2, 6434.0], [34.3, 6445.0], [34.4, 6464.0], [34.5, 6477.0], [34.6, 6487.0], [34.7, 6500.0], [34.8, 6504.0], [34.9, 6533.0], [35.0, 6534.0], [35.1, 6563.0], [35.2, 6564.0], [35.3, 6576.0], [35.4, 6577.0], [35.5, 6580.0], [35.6, 6623.0], [35.7, 6643.0], [35.8, 6651.0], [35.9, 6659.0], [36.0, 6660.0], [36.1, 6667.0], [36.2, 6670.0], [36.3, 6716.0], [36.4, 6720.0], [36.5, 6730.0], [36.6, 6731.0], [36.7, 6735.0], [36.8, 6735.0], [36.9, 6756.0], [37.0, 6757.0], [37.1, 6769.0], [37.2, 6769.0], [37.3, 6782.0], [37.4, 6786.0], [37.5, 6813.0], [37.6, 6816.0], [37.7, 6872.0], [37.8, 6872.0], [37.9, 6886.0], [38.0, 6921.0], [38.1, 6932.0], [38.2, 6942.0], [38.3, 6944.0], [38.4, 6948.0], [38.5, 6978.0], [38.6, 6985.0], [38.7, 7033.0], [38.8, 7033.0], [38.9, 7039.0], [39.0, 7041.0], [39.1, 7050.0], [39.2, 7056.0], [39.3, 7059.0], [39.4, 7075.0], [39.5, 7080.0], [39.6, 7102.0], [39.7, 7108.0], [39.8, 7120.0], [39.9, 7148.0], [40.0, 7167.0], [40.1, 7189.0], [40.2, 7206.0], [40.3, 7209.0], [40.4, 7218.0], [40.5, 7230.0], [40.6, 7335.0], [40.7, 7401.0], [40.8, 7408.0], [40.9, 7442.0], [41.0, 7502.0], [41.1, 7521.0], [41.2, 7536.0], [41.3, 7542.0], [41.4, 7556.0], [41.5, 7606.0], [41.6, 7634.0], [41.7, 7645.0], [41.8, 7652.0], [41.9, 7664.0], [42.0, 7675.0], [42.1, 7681.0], [42.2, 7682.0], [42.3, 7707.0], [42.4, 7712.0], [42.5, 7714.0], [42.6, 7716.0], [42.7, 7718.0], [42.8, 7718.0], [42.9, 7724.0], [43.0, 7725.0], [43.1, 7729.0], [43.2, 7743.0], [43.3, 7751.0], [43.4, 7753.0], [43.5, 7771.0], [43.6, 7816.0], [43.7, 7852.0], [43.8, 7884.0], [43.9, 7899.0], [44.0, 7908.0], [44.1, 7933.0], [44.2, 7940.0], [44.3, 7955.0], [44.4, 7964.0], [44.5, 7994.0], [44.6, 7995.0], [44.7, 8008.0], [44.8, 8014.0], [44.9, 8023.0], [45.0, 8026.0], [45.1, 8037.0], [45.2, 8038.0], [45.3, 8043.0], [45.4, 8045.0], [45.5, 8061.0], [45.6, 8072.0], [45.7, 8077.0], [45.8, 8083.0], [45.9, 8106.0], [46.0, 8107.0], [46.1, 8158.0], [46.2, 8160.0], [46.3, 8188.0], [46.4, 8188.0], [46.5, 8220.0], [46.6, 8224.0], [46.7, 8252.0], [46.8, 8267.0], [46.9, 8289.0], [47.0, 8292.0], [47.1, 8298.0], [47.2, 8302.0], [47.3, 8309.0], [47.4, 8314.0], [47.5, 8330.0], [47.6, 8331.0], [47.7, 8347.0], [47.8, 8357.0], [47.9, 8360.0], [48.0, 8361.0], [48.1, 8370.0], [48.2, 8371.0], [48.3, 8489.0], [48.4, 8497.0], [48.5, 8531.0], [48.6, 8539.0], [48.7, 8550.0], [48.8, 8564.0], [48.9, 8583.0], [49.0, 8595.0], [49.1, 8602.0], [49.2, 8610.0], [49.3, 8612.0], [49.4, 8623.0], [49.5, 8641.0], [49.6, 8648.0], [49.7, 8662.0], [49.8, 8676.0], [49.9, 8689.0], [50.0, 8708.0], [50.1, 8747.0], [50.2, 8748.0], [50.3, 8763.0], [50.4, 8782.0], [50.5, 8796.0], [50.6, 8801.0], [50.7, 8807.0], [50.8, 8820.0], [50.9, 8828.0], [51.0, 8838.0], [51.1, 8843.0], [51.2, 8861.0], [51.3, 8868.0], [51.4, 8868.0], [51.5, 8893.0], [51.6, 8898.0], [51.7, 8909.0], [51.8, 8937.0], [51.9, 8949.0], [52.0, 8970.0], [52.1, 9000.0], [52.2, 9035.0], [52.3, 9039.0], [52.4, 9047.0], [52.5, 9060.0], [52.6, 9060.0], [52.7, 9068.0], [52.8, 9070.0], [52.9, 9082.0], [53.0, 9101.0], [53.1, 9110.0], [53.2, 9111.0], [53.3, 9124.0], [53.4, 9128.0], [53.5, 9130.0], [53.6, 9135.0], [53.7, 9136.0], [53.8, 9141.0], [53.9, 9152.0], [54.0, 9159.0], [54.1, 9183.0], [54.2, 9183.0], [54.3, 9194.0], [54.4, 9196.0], [54.5, 9212.0], [54.6, 9213.0], [54.7, 9231.0], [54.8, 9249.0], [54.9, 9272.0], [55.0, 9276.0], [55.1, 9292.0], [55.2, 9302.0], [55.3, 9327.0], [55.4, 9337.0], [55.5, 9357.0], [55.6, 9398.0], [55.7, 9410.0], [55.8, 9440.0], [55.9, 9481.0], [56.0, 9483.0], [56.1, 9514.0], [56.2, 9517.0], [56.3, 9519.0], [56.4, 9524.0], [56.5, 9534.0], [56.6, 9534.0], [56.7, 9534.0], [56.8, 9536.0], [56.9, 9540.0], [57.0, 9542.0], [57.1, 9546.0], [57.2, 9551.0], [57.3, 9565.0], [57.4, 9581.0], [57.5, 9590.0], [57.6, 9601.0], [57.7, 9613.0], [57.8, 9616.0], [57.9, 9630.0], [58.0, 9644.0], [58.1, 9664.0], [58.2, 9670.0], [58.3, 9678.0], [58.4, 9680.0], [58.5, 9717.0], [58.6, 9722.0], [58.7, 9763.0], [58.8, 9767.0], [58.9, 9807.0], [59.0, 9813.0], [59.1, 9818.0], [59.2, 9822.0], [59.3, 9826.0], [59.4, 9838.0], [59.5, 9848.0], [59.6, 9851.0], [59.7, 9872.0], [59.8, 9895.0], [59.9, 9915.0], [60.0, 9938.0], [60.1, 9945.0], [60.2, 9953.0], [60.3, 9998.0], [60.4, 10004.0], [60.5, 10027.0], [60.6, 10029.0], [60.7, 10046.0], [60.8, 10047.0], [60.9, 10064.0], [61.0, 10064.0], [61.1, 10070.0], [61.2, 10076.0], [61.3, 10103.0], [61.4, 10131.0], [61.5, 10168.0], [61.6, 10171.0], [61.7, 10173.0], [61.8, 10186.0], [61.9, 10194.0], [62.0, 10198.0], [62.1, 10215.0], [62.2, 10215.0], [62.3, 10226.0], [62.4, 10237.0], [62.5, 10243.0], [62.6, 10245.0], [62.7, 10304.0], [62.8, 10334.0], [62.9, 10354.0], [63.0, 10364.0], [63.1, 10402.0], [63.2, 10402.0], [63.3, 10415.0], [63.4, 10423.0], [63.5, 10459.0], [63.6, 10464.0], [63.7, 10474.0], [63.8, 10479.0], [63.9, 10510.0], [64.0, 10520.0], [64.1, 10528.0], [64.2, 10543.0], [64.3, 10599.0], [64.4, 10633.0], [64.5, 10649.0], [64.6, 10704.0], [64.7, 10755.0], [64.8, 10763.0], [64.9, 10769.0], [65.0, 10782.0], [65.1, 10786.0], [65.2, 10790.0], [65.3, 10795.0], [65.4, 10797.0], [65.5, 10803.0], [65.6, 10807.0], [65.7, 10819.0], [65.8, 10821.0], [65.9, 10829.0], [66.0, 10831.0], [66.1, 10877.0], [66.2, 10897.0], [66.3, 10903.0], [66.4, 10910.0], [66.5, 10959.0], [66.6, 10991.0], [66.7, 10999.0], [66.8, 11017.0], [66.9, 11034.0], [67.0, 11037.0], [67.1, 11041.0], [67.2, 11045.0], [67.3, 11047.0], [67.4, 11071.0], [67.5, 11082.0], [67.6, 11083.0], [67.7, 11093.0], [67.8, 11096.0], [67.9, 11099.0], [68.0, 11101.0], [68.1, 11105.0], [68.2, 11106.0], [68.3, 11118.0], [68.4, 11122.0], [68.5, 11134.0], [68.6, 11144.0], [68.7, 11150.0], [68.8, 11150.0], [68.9, 11199.0], [69.0, 11209.0], [69.1, 11213.0], [69.2, 11217.0], [69.3, 11234.0], [69.4, 11238.0], [69.5, 11245.0], [69.6, 11254.0], [69.7, 11282.0], [69.8, 11294.0], [69.9, 11307.0], [70.0, 11311.0], [70.1, 11346.0], [70.2, 11376.0], [70.3, 11401.0], [70.4, 11413.0], [70.5, 11420.0], [70.6, 11432.0], [70.7, 11449.0], [70.8, 11454.0], [70.9, 11461.0], [71.0, 11466.0], [71.1, 11469.0], [71.2, 11472.0], [71.3, 11474.0], [71.4, 11475.0], [71.5, 11480.0], [71.6, 11492.0], [71.7, 11498.0], [71.8, 11504.0], [71.9, 11521.0], [72.0, 11522.0], [72.1, 11544.0], [72.2, 11557.0], [72.3, 11569.0], [72.4, 11574.0], [72.5, 11588.0], [72.6, 11597.0], [72.7, 11598.0], [72.8, 11638.0], [72.9, 11675.0], [73.0, 11678.0], [73.1, 11702.0], [73.2, 11703.0], [73.3, 11712.0], [73.4, 11716.0], [73.5, 11728.0], [73.6, 11734.0], [73.7, 11739.0], [73.8, 11744.0], [73.9, 11753.0], [74.0, 11759.0], [74.1, 11764.0], [74.2, 11769.0], [74.3, 11799.0], [74.4, 11813.0], [74.5, 11820.0], [74.6, 11885.0], [74.7, 11906.0], [74.8, 11944.0], [74.9, 12006.0], [75.0, 12026.0], [75.1, 12066.0], [75.2, 12073.0], [75.3, 12082.0], [75.4, 12085.0], [75.5, 12109.0], [75.6, 12120.0], [75.7, 12126.0], [75.8, 12128.0], [75.9, 12146.0], [76.0, 12148.0], [76.1, 12156.0], [76.2, 12157.0], [76.3, 12157.0], [76.4, 12279.0], [76.5, 12313.0], [76.6, 12317.0], [76.7, 12324.0], [76.8, 12355.0], [76.9, 12358.0], [77.0, 12371.0], [77.1, 12387.0], [77.2, 12397.0], [77.3, 12413.0], [77.4, 12442.0], [77.5, 12467.0], [77.6, 12502.0], [77.7, 12524.0], [77.8, 12547.0], [77.9, 12571.0], [78.0, 12657.0], [78.1, 12712.0], [78.2, 12722.0], [78.3, 12749.0], [78.4, 12752.0], [78.5, 12767.0], [78.6, 12768.0], [78.7, 12776.0], [78.8, 12787.0], [78.9, 12793.0], [79.0, 12803.0], [79.1, 12859.0], [79.2, 12860.0], [79.3, 12919.0], [79.4, 12962.0], [79.5, 13085.0], [79.6, 13102.0], [79.7, 13141.0], [79.8, 13155.0], [79.9, 13167.0], [80.0, 13184.0], [80.1, 13209.0], [80.2, 13230.0], [80.3, 13231.0], [80.4, 13234.0], [80.5, 13256.0], [80.6, 13266.0], [80.7, 13279.0], [80.8, 13292.0], [80.9, 13298.0], [81.0, 13300.0], [81.1, 13311.0], [81.2, 13318.0], [81.3, 13322.0], [81.4, 13333.0], [81.5, 13373.0], [81.6, 13413.0], [81.7, 13449.0], [81.8, 13453.0], [81.9, 13461.0], [82.0, 13467.0], [82.1, 13474.0], [82.2, 13474.0], [82.3, 13481.0], [82.4, 13498.0], [82.5, 13504.0], [82.6, 13512.0], [82.7, 13517.0], [82.8, 13523.0], [82.9, 13541.0], [83.0, 13546.0], [83.1, 13559.0], [83.2, 13564.0], [83.3, 13574.0], [83.4, 13576.0], [83.5, 13599.0], [83.6, 13608.0], [83.7, 13616.0], [83.8, 13629.0], [83.9, 13635.0], [84.0, 13648.0], [84.1, 13680.0], [84.2, 13680.0], [84.3, 13693.0], [84.4, 13697.0], [84.5, 13714.0], [84.6, 13756.0], [84.7, 13786.0], [84.8, 13787.0], [84.9, 13796.0], [85.0, 13799.0], [85.1, 13838.0], [85.2, 13841.0], [85.3, 13856.0], [85.4, 13860.0], [85.5, 13867.0], [85.6, 13881.0], [85.7, 13887.0], [85.8, 13889.0], [85.9, 13896.0], [86.0, 13900.0], [86.1, 13903.0], [86.2, 13906.0], [86.3, 13930.0], [86.4, 13937.0], [86.5, 13952.0], [86.6, 13958.0], [86.7, 13969.0], [86.8, 13970.0], [86.9, 13978.0], [87.0, 13983.0], [87.1, 14009.0], [87.2, 14045.0], [87.3, 14074.0], [87.4, 14085.0], [87.5, 14093.0], [87.6, 14097.0], [87.7, 14122.0], [87.8, 14138.0], [87.9, 14146.0], [88.0, 14146.0], [88.1, 14173.0], [88.2, 14174.0], [88.3, 14186.0], [88.4, 14204.0], [88.5, 14207.0], [88.6, 14211.0], [88.7, 14259.0], [88.8, 14259.0], [88.9, 14270.0], [89.0, 14277.0], [89.1, 14299.0], [89.2, 14302.0], [89.3, 14329.0], [89.4, 14331.0], [89.5, 14352.0], [89.6, 14376.0], [89.7, 14434.0], [89.8, 14449.0], [89.9, 14477.0], [90.0, 14478.0], [90.1, 14487.0], [90.2, 14512.0], [90.3, 14524.0], [90.4, 14526.0], [90.5, 14534.0], [90.6, 14539.0], [90.7, 14555.0], [90.8, 14564.0], [90.9, 14580.0], [91.0, 14591.0], [91.1, 14622.0], [91.2, 14626.0], [91.3, 14627.0], [91.4, 14637.0], [91.5, 14692.0], [91.6, 14693.0], [91.7, 14699.0], [91.8, 14713.0], [91.9, 14732.0], [92.0, 14732.0], [92.1, 14754.0], [92.2, 14761.0], [92.3, 14765.0], [92.4, 14769.0], [92.5, 14773.0], [92.6, 14782.0], [92.7, 14788.0], [92.8, 14794.0], [92.9, 14803.0], [93.0, 14809.0], [93.1, 14817.0], [93.2, 14819.0], [93.3, 14824.0], [93.4, 14830.0], [93.5, 14833.0], [93.6, 14838.0], [93.7, 14842.0], [93.8, 14852.0], [93.9, 14853.0], [94.0, 14855.0], [94.1, 14856.0], [94.2, 14857.0], [94.3, 14861.0], [94.4, 14864.0], [94.5, 14865.0], [94.6, 14865.0], [94.7, 14868.0], [94.8, 14870.0], [94.9, 14870.0], [95.0, 14872.0], [95.1, 14872.0], [95.2, 14873.0], [95.3, 14873.0], [95.4, 14875.0], [95.5, 14876.0], [95.6, 14876.0], [95.7, 14879.0], [95.8, 14879.0], [95.9, 14879.0], [96.0, 14880.0], [96.1, 14881.0], [96.2, 14881.0], [96.3, 14882.0], [96.4, 14884.0], [96.5, 14885.0], [96.6, 14887.0], [96.7, 14891.0], [96.8, 14895.0], [96.9, 14898.0], [97.0, 14898.0], [97.1, 14902.0], [97.2, 14914.0], [97.3, 14920.0], [97.4, 14925.0], [97.5, 14925.0], [97.6, 14934.0], [97.7, 14967.0], [97.8, 15105.0], [97.9, 15265.0], [98.0, 15348.0], [98.1, 15353.0], [98.2, 15393.0], [98.3, 15535.0], [98.4, 15566.0], [98.5, 15569.0], [98.6, 15586.0], [98.7, 15595.0], [98.8, 15648.0], [98.9, 15650.0], [99.0, 15658.0], [99.1, 15663.0], [99.2, 15706.0], [99.3, 15707.0], [99.4, 15715.0], [99.5, 15725.0], [99.6, 15733.0], [99.7, 15733.0], [99.8, 15740.0], [99.9, 15749.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 63.0, "series": [{"data": [[300.0, 1.0], [500.0, 1.0], [600.0, 2.0], [800.0, 2.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 9.0], [1400.0, 2.0], [1500.0, 11.0], [1600.0, 10.0], [1700.0, 14.0], [1800.0, 18.0], [1900.0, 31.0], [2000.0, 15.0], [2100.0, 16.0], [2200.0, 10.0], [2300.0, 13.0], [2400.0, 15.0], [2500.0, 3.0], [2600.0, 6.0], [2800.0, 6.0], [2700.0, 2.0], [2900.0, 5.0], [3000.0, 7.0], [3100.0, 3.0], [3300.0, 1.0], [3200.0, 2.0], [3400.0, 5.0], [3500.0, 10.0], [3600.0, 10.0], [3700.0, 5.0], [3800.0, 2.0], [3900.0, 7.0], [4000.0, 16.0], [4100.0, 7.0], [4200.0, 4.0], [4300.0, 9.0], [4400.0, 16.0], [4500.0, 8.0], [4600.0, 6.0], [4700.0, 12.0], [4800.0, 16.0], [4900.0, 8.0], [5000.0, 17.0], [5100.0, 11.0], [5300.0, 18.0], [5200.0, 7.0], [5400.0, 12.0], [5500.0, 2.0], [5600.0, 8.0], [5700.0, 11.0], [5800.0, 8.0], [5900.0, 11.0], [6000.0, 11.0], [6100.0, 14.0], [6200.0, 8.0], [6300.0, 14.0], [6400.0, 13.0], [6500.0, 13.0], [6600.0, 11.0], [6700.0, 17.0], [6900.0, 11.0], [6800.0, 8.0], [7000.0, 13.0], [7100.0, 9.0], [7200.0, 6.0], [7400.0, 4.0], [7300.0, 2.0], [7500.0, 8.0], [7600.0, 11.0], [7700.0, 20.0], [7800.0, 6.0], [7900.0, 10.0], [8000.0, 19.0], [8100.0, 8.0], [8200.0, 11.0], [8300.0, 16.0], [8600.0, 14.0], [8400.0, 3.0], [8500.0, 9.0], [8700.0, 9.0], [8800.0, 16.0], [8900.0, 7.0], [9000.0, 13.0], [9100.0, 22.0], [9200.0, 11.0], [9300.0, 7.0], [9500.0, 23.0], [9400.0, 6.0], [9700.0, 7.0], [9600.0, 13.0], [9800.0, 15.0], [9900.0, 7.0], [10000.0, 14.0], [10100.0, 11.0], [10200.0, 9.0], [10300.0, 7.0], [10500.0, 7.0], [10400.0, 12.0], [10600.0, 3.0], [10700.0, 13.0], [10800.0, 13.0], [10900.0, 7.0], [11000.0, 18.0], [11100.0, 15.0], [11200.0, 13.0], [11300.0, 7.0], [11400.0, 22.0], [11500.0, 15.0], [11600.0, 5.0], [11700.0, 19.0], [11800.0, 4.0], [11900.0, 3.0], [12000.0, 10.0], [12100.0, 13.0], [12200.0, 1.0], [12300.0, 12.0], [12400.0, 5.0], [12500.0, 6.0], [12600.0, 2.0], [12700.0, 13.0], [12800.0, 4.0], [12900.0, 3.0], [13000.0, 2.0], [13100.0, 8.0], [13300.0, 9.0], [13200.0, 13.0], [13500.0, 17.0], [13400.0, 13.0], [13600.0, 13.0], [13800.0, 14.0], [13700.0, 9.0], [13900.0, 17.0], [14200.0, 12.0], [14300.0, 7.0], [14000.0, 9.0], [14100.0, 10.0], [14500.0, 13.0], [14700.0, 17.0], [14400.0, 8.0], [14600.0, 11.0], [14800.0, 63.0], [14900.0, 11.0], [15200.0, 2.0], [15300.0, 4.0], [15100.0, 1.0], [15500.0, 7.0], [15600.0, 6.0], [15700.0, 13.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1474.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 25.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1474.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 25.5, "minX": 1.7330208E12, "maxY": 336.07294832826756, "series": [{"data": [[1.7330208E12, 336.07294832826756], [1.73302086E12, 86.07602339181288]], "isOverall": false, "label": "test_500", "isController": false}, {"data": [[1.7330208E12, 145.5], [1.73302086E12, 45.53333333333332]], "isOverall": false, "label": "test_200", "isController": false}, {"data": [[1.7330208E12, 75.5], [1.73302086E12, 25.5]], "isOverall": false, "label": "test_100", "isController": false}, {"data": [[1.7330208E12, 259.5248226950354], [1.73302086E12, 59.525423728813564]], "isOverall": false, "label": "test_400", "isController": false}, {"data": [[1.7330208E12, 217.52409638554215], [1.73302086E12, 67.51492537313436]], "isOverall": false, "label": "test_300", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302086E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 535.0, "minX": 1.0, "maxY": 15749.0, "series": [{"data": [[3.0, 14936.5], [4.0, 14874.0], [7.0, 14882.0], [8.0, 15318.5], [9.0, 14907.0], [10.0, 14885.5], [11.0, 14877.0], [12.0, 14882.0], [13.0, 14873.0], [15.0, 14880.0], [16.0, 14928.0], [17.0, 14872.0], [18.0, 14887.0], [19.0, 14898.0], [20.0, 14867.0], [22.0, 14889.5], [23.0, 14885.0], [25.0, 14896.5], [27.0, 14876.0], [28.0, 15301.0], [29.0, 15740.0], [30.0, 15733.0], [33.0, 14879.0], [32.0, 15333.0], [35.0, 14881.5], [36.0, 15749.0], [39.0, 14857.0], [38.0, 14902.5], [41.0, 15325.0], [43.0, 14925.0], [42.0, 14857.0], [45.0, 15740.0], [44.0, 14876.0], [47.0, 14881.0], [46.0, 14868.0], [49.0, 14879.0], [48.0, 14855.0], [51.0, 14879.0], [50.0, 15715.0], [53.0, 14853.0], [52.0, 14873.0], [55.0, 15706.0], [54.0, 14855.0], [57.0, 15705.0], [56.0, 15715.0], [59.0, 15105.0], [58.0, 14824.0], [61.0, 14861.0], [63.0, 14879.0], [62.0, 15707.0], [67.0, 14870.0], [66.0, 14864.0], [65.0, 14821.0], [64.0, 14848.0], [71.0, 14817.0], [70.0, 14839.5], [68.0, 14920.0], [75.0, 14871.0], [74.0, 14814.0], [72.0, 14861.0], [79.0, 14865.0], [78.0, 14799.0], [77.0, 14861.0], [76.0, 14816.5], [83.0, 15658.0], [82.0, 14852.0], [81.0, 15246.5], [87.0, 14840.0], [86.0, 14803.5], [84.0, 15655.0], [91.0, 15645.0], [90.0, 14872.0], [89.0, 14838.0], [88.0, 15650.0], [95.0, 15648.0], [94.0, 14782.0], [93.0, 14773.0], [92.0, 14833.0], [99.0, 14732.0], [98.0, 14761.0], [97.0, 15595.0], [96.0, 15586.0], [103.0, 15573.0], [102.0, 14742.0], [101.0, 14785.0], [100.0, 14699.0], [107.0, 15129.0], [105.0, 14732.0], [104.0, 15569.0], [111.0, 15535.0], [110.0, 14693.0], [109.0, 14765.0], [108.0, 15556.0], [115.0, 14746.5], [113.0, 14670.0], [112.0, 14699.0], [119.0, 14622.0], [118.0, 14626.0], [117.0, 14614.5], [123.0, 14627.0], [122.0, 14558.0], [121.0, 14555.0], [127.0, 14539.0], [126.0, 15357.0], [125.0, 14531.0], [124.0, 15393.0], [135.0, 15299.0], [134.0, 14478.0], [133.0, 14484.0], [132.0, 14472.0], [131.0, 14477.0], [130.0, 14487.0], [129.0, 15348.0], [128.0, 15353.0], [143.0, 14344.0], [142.0, 14329.0], [141.0, 14352.0], [140.0, 14287.0], [139.0, 14376.0], [138.0, 14420.0], [137.0, 14434.0], [136.0, 15265.0], [151.0, 14143.0], [150.0, 14186.0], [149.0, 14186.0], [148.0, 14449.0], [147.0, 14207.0], [146.0, 14205.0], [145.0, 14262.0], [144.0, 14259.0], [159.0, 14093.0], [158.0, 14085.0], [157.0, 14146.0], [156.0, 14138.0], [155.0, 14159.0], [154.0, 14967.0], [153.0, 14174.0], [152.0, 14173.0], [167.0, 13997.0], [166.0, 14062.0], [165.0, 14045.0], [164.0, 14086.0], [162.0, 14097.0], [161.0, 14518.0], [175.0, 13949.5], [173.0, 13973.0], [172.0, 13958.0], [171.0, 13996.0], [169.0, 13970.0], [168.0, 13978.0], [183.0, 14773.0], [182.0, 14754.0], [181.0, 14146.0], [180.0, 14765.0], [179.0, 14769.0], [178.0, 14381.5], [176.0, 13937.0], [191.0, 14297.0], [189.0, 13906.0], [188.0, 13902.0], [187.0, 13887.0], [186.0, 14732.0], [185.0, 13952.0], [184.0, 13903.0], [199.0, 13860.0], [198.0, 13959.0], [196.0, 13856.0], [195.0, 13896.0], [194.0, 13872.5], [192.0, 13900.0], [207.0, 13756.0], [206.0, 13799.0], [205.0, 13786.0], [204.0, 13862.0], [203.0, 13867.0], [202.0, 13841.0], [201.0, 13892.0], [200.0, 13882.0], [214.0, 14591.0], [213.0, 14180.5], [211.0, 13787.0], [210.0, 14580.0], [209.0, 13787.0], [208.0, 13796.0], [223.0, 13693.0], [222.0, 13710.0], [221.0, 14524.0], [220.0, 13697.0], [219.0, 14512.0], [218.0, 14523.0], [217.0, 14258.0], [231.0, 13629.0], [230.0, 13680.0], [229.0, 13680.0], [228.0, 13678.5], [226.0, 13648.0], [225.0, 13631.0], [224.0, 13923.0], [239.0, 13564.0], [238.0, 13608.0], [237.0, 13608.0], [236.0, 13577.0], [235.0, 13573.0], [233.0, 13635.0], [232.0, 13838.0], [247.0, 14331.0], [246.0, 13537.0], [245.0, 13559.0], [244.0, 13541.0], [243.0, 13576.0], [242.0, 13523.0], [241.0, 13599.0], [240.0, 13616.0], [255.0, 13907.5], [254.0, 13517.0], [252.0, 13495.5], [250.0, 14302.0], [249.0, 13547.0], [248.0, 13546.0], [259.0, 13481.0], [270.0, 13841.5], [268.0, 13458.0], [267.0, 13472.0], [266.0, 13442.0], [264.0, 13863.0], [263.0, 13467.0], [261.0, 13866.5], [258.0, 13498.0], [257.0, 14299.0], [256.0, 13501.0], [286.0, 13300.0], [287.0, 13298.0], [285.0, 13293.0], [284.0, 13318.0], [283.0, 13311.0], [282.0, 13322.0], [281.0, 13279.0], [280.0, 13333.0], [279.0, 13318.0], [273.0, 14204.0], [272.0, 13463.5], [275.0, 14211.0], [274.0, 14221.0], [278.0, 13515.0], [277.0, 13349.0], [276.0, 13373.0], [302.0, 13937.0], [303.0, 13158.0], [301.0, 13155.0], [300.0, 13194.0], [299.0, 13167.0], [298.0, 13209.0], [297.0, 13184.0], [296.0, 13234.0], [295.0, 13266.0], [289.0, 13247.0], [288.0, 13292.0], [291.0, 13231.0], [290.0, 13273.0], [294.0, 13230.0], [293.0, 13230.0], [292.0, 13256.0], [318.0, 12776.0], [319.0, 12767.0], [317.0, 12774.0], [316.0, 12787.0], [315.0, 12825.0], [314.0, 12860.0], [313.0, 12859.0], [312.0, 12914.0], [311.0, 12919.0], [305.0, 13102.0], [304.0, 13141.0], [307.0, 13111.0], [306.0, 13310.0], [310.0, 12962.0], [309.0, 13009.0], [308.0, 13085.0], [334.0, 12524.0], [335.0, 12505.0], [333.0, 12547.0], [332.0, 12571.0], [331.0, 12552.0], [330.0, 12657.0], [329.0, 12712.0], [328.0, 12722.0], [327.0, 12736.0], [321.0, 12793.0], [320.0, 12752.0], [323.0, 12803.0], [322.0, 12749.0], [326.0, 12793.0], [325.0, 12768.0], [324.0, 12766.0], [350.0, 12324.0], [351.0, 12317.0], [349.0, 12371.0], [348.0, 12338.5], [346.0, 12387.0], [345.0, 12355.0], [344.0, 12376.0], [343.0, 12413.0], [337.0, 12463.0], [336.0, 12688.0], [339.0, 12467.0], [338.0, 12502.0], [342.0, 12442.0], [341.0, 12397.0], [340.0, 12408.0], [366.0, 12137.0], [367.0, 12120.0], [364.0, 12149.0], [355.0, 12279.0], [354.0, 12305.0], [353.0, 12358.0], [352.0, 12313.0], [363.0, 12109.0], [362.0, 12157.0], [361.0, 12157.0], [360.0, 12128.5], [358.0, 12157.0], [357.0, 12148.0], [356.0, 12156.0], [382.0, 11885.0], [383.0, 11818.0], [381.0, 11903.0], [380.0, 11944.0], [379.0, 11906.0], [378.0, 12026.0], [377.0, 12006.0], [376.0, 12004.0], [375.0, 12073.0], [369.0, 12126.0], [368.0, 12085.0], [371.0, 12079.0], [370.0, 12094.0], [374.0, 12046.0], [373.0, 12082.0], [372.0, 12066.0], [387.0, 11761.0], [397.0, 11723.0], [399.0, 11730.5], [396.0, 11742.0], [386.0, 11794.0], [384.0, 11820.0], [394.0, 11756.5], [392.0, 11728.0], [391.0, 11759.0], [390.0, 11739.0], [389.0, 11764.0], [388.0, 11799.0], [414.0, 11582.0], [415.0, 11574.0], [413.0, 11569.0], [412.0, 11588.0], [411.0, 11638.0], [410.0, 11597.0], [409.0, 11598.0], [408.0, 11678.0], [407.0, 11659.0], [401.0, 11716.0], [400.0, 11702.0], [403.0, 11712.0], [402.0, 11734.0], [406.0, 11691.0], [405.0, 11675.0], [404.0, 11703.0], [430.0, 11494.0], [431.0, 11466.0], [429.0, 11473.0], [428.0, 11480.0], [427.0, 11476.0], [425.0, 11504.0], [424.0, 11474.0], [423.0, 11514.0], [417.0, 11598.0], [416.0, 11557.0], [419.0, 11521.0], [418.0, 11531.0], [422.0, 11544.0], [421.0, 11498.0], [420.0, 11565.0], [445.0, 11413.0], [446.0, 11401.0], [444.0, 11438.0], [435.0, 11492.0], [434.0, 11454.0], [433.0, 11479.0], [443.0, 11414.0], [442.0, 11457.0], [441.0, 11426.0], [439.0, 11475.0], [438.0, 11472.0], [437.0, 11459.0], [460.0, 11217.0], [462.0, 11213.0], [463.0, 11210.0], [461.0, 11243.0], [459.0, 11227.5], [457.0, 11246.0], [455.0, 11245.0], [449.0, 11345.0], [448.0, 11383.0], [451.0, 11307.0], [450.0, 11346.0], [454.0, 11294.0], [453.0, 11265.0], [452.0, 11302.0], [478.0, 11099.0], [479.0, 11106.0], [477.0, 11118.0], [476.0, 11105.0], [475.0, 11104.0], [473.0, 11134.0], [472.0, 11082.0], [471.0, 11127.0], [465.0, 11201.5], [467.0, 11150.0], [466.0, 11199.0], [470.0, 11104.0], [469.0, 11148.5], [494.0, 10999.0], [495.0, 11017.0], [493.0, 11021.0], [492.0, 11037.0], [491.0, 11045.0], [490.0, 11040.5], [488.0, 11045.0], [487.0, 11041.0], [481.0, 11098.0], [480.0, 11096.0], [483.0, 11083.0], [482.0, 11101.0], [486.0, 11083.0], [485.0, 11081.0], [484.0, 11071.0], [510.0, 10807.0], [511.0, 11282.0], [509.0, 10794.0], [508.0, 11066.0], [506.0, 10797.0], [505.0, 10829.0], [504.0, 10819.0], [503.0, 10826.0], [497.0, 10991.0], [496.0, 10959.0], [499.0, 10903.0], [498.0, 10910.0], [502.0, 10897.0], [501.0, 10871.0], [500.0, 10898.0], [537.0, 10469.0], [541.0, 10405.0], [543.0, 10639.5], [529.0, 10641.0], [528.0, 10649.0], [531.0, 10543.0], [530.0, 11038.0], [533.0, 10479.0], [532.0, 10999.0], [540.0, 10910.0], [539.0, 10429.0], [538.0, 10459.0], [536.0, 10464.0], [519.0, 10790.0], [518.0, 10777.0], [516.0, 10803.0], [515.0, 10795.0], [514.0, 10786.0], [513.0, 10782.0], [512.0, 10809.0], [527.0, 10633.0], [526.0, 11144.0], [525.0, 11122.0], [524.0, 10704.0], [523.0, 10763.0], [522.0, 10755.0], [521.0, 10769.0], [520.0, 10755.0], [535.0, 10474.0], [534.0, 10481.0], [569.0, 10520.0], [574.0, 10047.0], [575.0, 10528.0], [560.0, 10198.0], [562.0, 10423.0], [561.0, 10187.0], [565.0, 10332.5], [563.0, 10168.0], [573.0, 10510.0], [572.0, 10292.5], [570.0, 10070.0], [568.0, 10076.0], [550.0, 10354.0], [549.0, 10340.0], [548.0, 10831.0], [547.0, 10364.0], [546.0, 10402.0], [545.0, 10396.0], [544.0, 10415.0], [559.0, 10194.0], [558.0, 10186.0], [557.0, 10206.0], [556.0, 10225.0], [555.0, 10243.0], [554.0, 10242.0], [553.0, 10237.0], [552.0, 10568.0], [567.0, 10226.0], [566.0, 10093.0], [601.0, 9565.0], [606.0, 9938.0], [607.0, 9938.0], [592.0, 9717.0], [594.0, 10139.0], [593.0, 10173.0], [597.0, 9826.0], [596.0, 9654.0], [605.0, 9524.0], [604.0, 9713.0], [603.0, 10099.0], [600.0, 9767.0], [583.0, 10599.0], [582.0, 10215.0], [581.0, 10173.0], [580.0, 10006.0], [579.0, 10245.0], [578.0, 10032.0], [577.0, 10037.5], [591.0, 9731.0], [590.0, 9998.0], [589.0, 10215.0], [588.0, 9818.0], [587.0, 10303.0], [586.0, 9855.0], [585.0, 10304.0], [584.0, 9848.0], [599.0, 9621.0], [598.0, 10131.0], [633.0, 9813.0], [638.0, 9585.0], [639.0, 9342.0], [625.0, 9945.0], [624.0, 9971.0], [627.0, 9542.0], [626.0, 9551.0], [629.0, 9536.0], [628.0, 9825.0], [636.0, 9807.0], [635.0, 9822.0], [634.0, 9544.0], [632.0, 9601.0], [615.0, 9754.5], [613.0, 9648.0], [612.0, 9616.0], [611.0, 10069.0], [610.0, 10064.0], [609.0, 10057.0], [608.0, 9872.0], [623.0, 9514.0], [622.0, 9838.0], [621.0, 10004.0], [620.0, 9848.0], [619.0, 9513.0], [618.0, 9398.0], [617.0, 9609.0], [616.0, 9895.0], [631.0, 9546.0], [630.0, 9953.0], [665.0, 9272.0], [670.0, 9413.0], [671.0, 9231.0], [656.0, 9678.0], [658.0, 9561.0], [657.0, 9327.0], [660.0, 9481.0], [659.0, 9337.0], [669.0, 9326.5], [667.0, 9534.0], [666.0, 9223.0], [664.0, 9212.0], [647.0, 9670.0], [646.0, 9532.0], [645.0, 9790.0], [644.0, 9763.0], [643.0, 9519.0], [642.0, 9517.0], [641.0, 9915.0], [640.0, 9518.0], [655.0, 9680.0], [654.0, 9276.0], [653.0, 9630.0], [652.0, 9200.0], [651.0, 9676.0], [650.0, 9213.0], [649.0, 9249.0], [648.0, 9851.0], [662.0, 9534.0], [661.0, 9479.0], [700.0, 9136.0], [703.0, 8861.0], [689.0, 9176.0], [688.0, 9238.666666666666], [691.0, 9281.0], [690.0, 9540.0], [693.0, 9537.0], [692.0, 9534.0], [702.0, 8878.0], [701.0, 9130.0], [699.0, 9055.0], [698.0, 9111.0], [697.0, 9060.0], [696.0, 9317.0], [686.0, 9130.0], [672.0, 9186.0], [675.0, 9161.0], [674.0, 9256.0], [679.0, 9314.0], [677.0, 9445.5], [685.0, 9124.0], [682.0, 9586.0], [681.0, 9196.0], [680.0, 9722.0], [695.0, 9159.0], [694.0, 9082.0], [730.0, 9070.0], [734.0, 9067.0], [735.0, 8641.0], [720.0, 8754.0], [723.0, 8960.0], [721.0, 8796.0], [725.0, 8748.0], [724.0, 9148.0], [733.0, 8905.0], [732.0, 8970.0], [731.0, 9000.0], [728.0, 9110.0], [711.0, 9302.0], [710.0, 8968.0], [708.0, 8843.0], [707.0, 8909.0], [706.0, 8828.0], [705.0, 9183.0], [704.0, 9283.0], [719.0, 8971.0], [717.0, 9136.0], [716.0, 8820.0], [715.0, 9060.0], [714.0, 8801.0], [713.0, 8893.0], [712.0, 9068.0], [727.0, 8991.0], [726.0, 9035.0], [761.0, 8747.0], [765.0, 8731.0], [766.0, 8656.0], [753.0, 8531.0], [752.0, 8807.0], [755.0, 8763.0], [754.0, 8794.0], [757.0, 8676.0], [756.0, 8689.0], [764.0, 8347.0], [763.0, 8362.0], [762.0, 8583.0], [760.0, 8868.0], [743.0, 8782.0], [742.0, 8949.0], [741.0, 8545.0], [740.0, 8612.0], [739.0, 8957.5], [737.0, 9183.0], [736.0, 8689.0], [751.0, 8838.0], [750.0, 8937.0], [749.0, 8550.0], [748.0, 8482.0], [747.0, 8564.0], [746.0, 8946.0], [745.0, 8570.0], [744.0, 8824.0], [759.0, 8489.0], [758.0, 8898.0], [793.0, 8026.0], [797.0, 8331.0], [799.0, 8204.0], [785.0, 8072.0], [784.0, 8220.0], [787.0, 8497.0], [786.0, 8504.0], [789.0, 8612.0], [788.0, 8038.0], [796.0, 8342.0], [795.0, 8277.0], [794.0, 8361.0], [792.0, 8107.0], [775.0, 8624.0], [774.0, 8708.0], [773.0, 8595.0], [772.0, 8329.0], [771.0, 8293.0], [770.0, 8370.0], [769.0, 8302.0], [768.0, 8488.0], [783.0, 8224.0], [782.0, 8602.0], [781.0, 8648.0], [780.0, 8600.0], [779.0, 8623.0], [778.0, 8539.0], [777.0, 8248.0], [776.0, 8610.0], [791.0, 8077.0], [790.0, 8052.0], [825.0, 7927.0], [829.0, 7718.0], [831.0, 7947.5], [817.0, 7940.0], [816.0, 8252.0], [819.0, 8175.0], [818.0, 7899.0], [828.0, 7816.0], [827.0, 8158.0], [826.0, 7994.0], [815.0, 8267.0], [800.0, 8043.0], [802.0, 8298.0], [801.0, 8359.0], [804.0, 8360.0], [803.0, 7995.0], [807.0, 8319.5], [805.0, 8212.0], [814.0, 8289.0], [813.0, 8188.0], [812.0, 7885.0], [811.0, 8308.0], [810.0, 8292.0], [809.0, 8190.0], [823.0, 7729.0], [822.0, 8106.0], [821.0, 8160.0], [820.0, 8029.0], [858.0, 7853.5], [862.0, 7847.0], [863.0, 7884.0], [849.0, 8022.0], [848.0, 8014.0], [851.0, 8008.0], [850.0, 7911.0], [853.0, 7966.0], [852.0, 7582.0], [861.0, 7442.0], [860.0, 7536.0], [859.0, 7718.0], [856.0, 7542.0], [839.0, 8045.0], [838.0, 8094.0], [837.0, 8061.0], [836.0, 7844.0], [834.0, 8039.0], [833.0, 8072.0], [832.0, 7955.0], [847.0, 7852.0], [846.0, 7645.0], [845.0, 7658.0], [844.0, 7784.0], [842.0, 7712.0], [841.0, 7908.0], [840.0, 8127.0], [855.0, 7951.0], [854.0, 7541.0], [888.0, 7606.0], [892.0, 7167.0], [895.0, 7080.0], [882.0, 7715.0], [880.0, 7634.0], [885.0, 7696.5], [883.0, 7682.0], [894.0, 7401.0], [893.0, 7102.0], [891.0, 7120.0], [890.0, 7502.0], [889.0, 7556.0], [879.0, 7676.0], [866.0, 7745.0], [864.0, 7652.0], [870.0, 7751.0], [869.0, 7608.666666666667], [878.0, 7335.0], [877.0, 7749.0], [876.0, 7725.0], [875.0, 7716.0], [874.0, 7361.0], [873.0, 7664.0], [872.0, 7740.0], [887.0, 7505.0], [886.0, 7521.0], [922.0, 7059.0], [926.0, 7075.0], [927.0, 6757.0], [914.0, 7178.0], [912.0, 6938.5], [916.0, 7079.0], [915.0, 6797.5], [925.0, 6667.0], [924.0, 7059.0], [923.0, 7091.5], [921.0, 6958.5], [903.0, 7206.0], [902.0, 7229.0], [901.0, 6962.0], [900.0, 6985.0], [899.0, 7033.0], [898.0, 6942.0], [897.0, 7416.0], [896.0, 7047.0], [910.0, 6766.0], [909.0, 6807.0], [908.0, 7209.0], [907.0, 6836.0], [906.0, 7218.0], [905.0, 6872.0], [904.0, 7209.0], [918.0, 7189.0], [917.0, 7035.0], [953.0, 6474.0], [957.0, 6782.0], [958.0, 6735.0], [945.0, 6872.0], [944.0, 6994.0], [949.0, 6755.5], [947.0, 6731.0], [956.0, 6405.0], [955.0, 6651.0], [954.0, 6464.0], [952.0, 6932.0], [935.0, 6980.5], [934.0, 6660.0], [932.0, 7039.0], [931.0, 6731.0], [930.0, 6720.0], [929.0, 6676.0], [928.0, 7105.0], [943.0, 6944.0], [942.0, 6925.0], [941.0, 6921.0], [940.0, 6948.0], [939.0, 7041.0], [938.0, 7033.0], [937.0, 6942.0], [936.0, 7050.0], [951.0, 6813.0], [950.0, 6874.0], [986.0, 6548.5], [990.0, 6577.0], [991.0, 6517.0], [976.0, 6659.0], [979.0, 6658.0], [977.0, 6331.0], [981.0, 6623.0], [980.0, 6724.0], [989.0, 6487.0], [988.0, 6504.0], [987.0, 6500.0], [984.0, 6579.0], [967.0, 6488.5], [965.0, 6560.0], [963.0, 6786.0], [962.0, 6399.0], [961.0, 6584.5], [960.0, 6390.0], [975.0, 6264.0], [974.0, 6670.0], [973.0, 6716.0], [972.0, 6309.0], [971.0, 6304.0], [970.0, 6643.0], [969.0, 6756.0], [968.0, 6730.0], [983.0, 6261.0], [982.0, 6638.0], [1020.0, 6346.0], [1023.0, 6269.0], [1009.0, 6033.0], [1008.0, 6426.0], [1011.0, 6411.0], [1010.0, 6270.0], [1013.0, 6251.0], [1012.0, 6361.0], [1022.0, 6029.0], [1021.0, 6320.0], [1019.0, 5971.0], [1018.0, 6412.0], [1017.0, 6305.0], [1016.0, 6359.0], [1007.0, 6491.0], [993.0, 6569.0], [992.0, 6191.0], [995.0, 6133.0], [994.0, 6564.0], [997.0, 6189.0], [996.0, 6156.0], [999.0, 6156.0], [998.0, 6563.0], [1006.0, 6445.0], [1005.0, 6401.0], [1004.0, 6149.0], [1003.0, 6433.0], [1002.0, 6355.0], [1001.0, 6103.0], [1000.0, 6477.0], [1015.0, 6034.0], [1014.0, 6305.0], [1084.0, 5388.0], [1056.0, 5736.0], [1058.0, 5805.0], [1060.0, 5429.0], [1062.0, 5844.0], [1064.0, 5476.0], [1068.0, 5785.0], [1066.0, 5411.0], [1070.0, 5404.0], [1086.0, 5613.0], [1082.0, 5721.0], [1080.0, 5756.0], [1078.0, 5760.0], [1074.0, 5733.0], [1072.0, 5822.5], [1038.0, 6184.0], [1036.0, 6143.0], [1028.0, 6117.0], [1026.0, 6226.0], [1024.0, 6281.0], [1054.0, 5805.0], [1048.0, 5930.0], [1046.0, 6029.0], [1044.0, 5906.0], [1042.0, 5704.0], [1040.0, 6075.0], [1142.0, 5034.0], [1138.0, 4677.0], [1148.0, 5055.0], [1120.0, 5204.5], [1122.0, 4954.0], [1124.0, 4825.0], [1126.0, 5368.0], [1128.0, 5156.0], [1130.0, 5094.0], [1132.0, 5075.0], [1134.0, 5071.0], [1150.0, 5039.0], [1144.0, 5031.5], [1140.0, 5058.0], [1136.0, 5025.0], [1118.0, 5338.0], [1088.0, 5616.0], [1090.0, 5227.0], [1092.0, 5405.0], [1094.0, 5520.0], [1098.0, 5262.0], [1100.0, 5365.0], [1102.0, 5392.0], [1114.0, 5347.5], [1112.0, 5175.0], [1110.0, 5326.0], [1106.0, 5374.0], [1104.0, 5359.0], [1210.0, 4474.0], [1192.0, 4512.5], [1208.0, 4483.0], [1214.0, 4359.666666666667], [1184.0, 4536.5], [1188.0, 4722.0], [1190.0, 4691.0], [1194.0, 4799.0], [1196.0, 4270.0], [1198.0, 4575.0], [1212.0, 4428.0], [1206.0, 4410.0], [1204.0, 4493.0], [1202.0, 4449.0], [1200.0, 4473.0], [1166.0, 4586.0], [1164.0, 4835.0], [1162.0, 4894.5], [1160.0, 4899.0], [1156.0, 4786.0], [1154.0, 4946.0], [1152.0, 4945.0], [1182.0, 4769.0], [1180.0, 4432.0], [1178.0, 4506.0], [1176.0, 4817.0], [1174.0, 4457.0], [1172.0, 4798.0], [1272.0, 3619.5], [1266.0, 3677.0], [1276.0, 3547.5], [1248.0, 4013.0], [1250.0, 3988.0], [1252.0, 3961.0], [1256.0, 3914.0], [1258.0, 3560.0], [1260.0, 3590.0], [1262.0, 3706.0], [1278.0, 3656.0], [1274.0, 3571.0], [1268.0, 3699.0], [1264.0, 3682.0], [1216.0, 4305.5], [1218.0, 4334.0], [1220.0, 4005.0], [1224.0, 4336.0], [1222.0, 4048.0], [1226.0, 4162.5], [1228.0, 3913.0], [1230.0, 4257.0], [1246.0, 4043.0], [1244.0, 4029.0], [1242.0, 4083.0], [1240.0, 4105.0], [1236.0, 4096.0], [1234.0, 4114.0], [1232.0, 4322.0], [1332.0, 2272.0], [1340.0, 2211.0], [1314.0, 2608.0], [1316.0, 2673.0], [1318.0, 2309.0], [1320.0, 2367.0], [1326.0, 2858.0], [1342.0, 2367.0], [1338.0, 2498.0], [1336.0, 2174.0], [1334.0, 2181.0], [1330.0, 2351.0], [1328.0, 2274.0], [1280.0, 3517.0], [1282.0, 3546.0], [1284.0, 3468.0], [1288.0, 3057.0], [1290.0, 3055.0], [1292.0, 3012.0], [1294.0, 2985.0], [1310.0, 2547.0], [1308.0, 2790.6666666666665], [1304.0, 3019.0], [1302.0, 3173.0], [1300.0, 2880.0], [1298.0, 2894.0], [1296.0, 3309.0], [1400.0, 1925.0], [1384.0, 2298.0], [1376.0, 1981.5], [1380.0, 1953.0], [1382.0, 1952.0], [1386.0, 1927.0], [1388.0, 2466.0], [1390.0, 1941.0], [1406.0, 1850.0], [1402.0, 1964.0], [1398.0, 1880.25], [1392.0, 1924.0], [1374.0, 1900.0], [1346.0, 2310.0], [1348.0, 2284.5], [1352.0, 2054.0], [1354.0, 2404.0], [1356.0, 2026.0], [1358.0, 2168.0], [1370.0, 2513.0], [1366.0, 2031.0], [1364.0, 2023.0], [1362.0, 1917.0], [1360.0, 2056.0], [1464.0, 1545.0], [1460.0, 1521.0], [1468.0, 1477.0], [1440.0, 1750.0], [1442.0, 1689.0], [1444.0, 1975.0], [1446.0, 1739.0], [1448.0, 1708.0], [1450.0, 1627.0], [1452.0, 1614.0], [1454.0, 1650.0], [1470.0, 1999.0], [1466.0, 2025.0], [1462.0, 1602.0], [1458.0, 1619.0], [1418.0, 2393.0], [1416.0, 2198.0], [1414.0, 1910.0], [1412.0, 1903.0], [1410.0, 1852.0], [1408.0, 1856.0], [1438.0, 1700.0], [1436.0, 1793.0], [1434.0, 2293.0], [1432.0, 2109.0], [1430.0, 2309.0], [1428.0, 1795.0], [1426.0, 1847.0], [1424.0, 1858.0], [1474.0, 1347.0], [1480.0, 1179.0], [1500.0, 639.0], [1472.0, 1357.0], [1478.0, 1709.0], [1482.0, 1147.0], [1484.0, 1547.0], [1486.0, 1020.0], [1496.0, 535.0], [1494.0, 670.0], [1492.0, 1228.0], [1490.0, 1351.0], [1488.0, 1378.0], [1079.0, 5392.0], [1075.0, 5429.0], [1087.0, 5648.0], [1057.0, 5499.0], [1059.0, 5687.0], [1063.0, 5448.0], [1065.0, 5800.0], [1069.0, 5661.5], [1085.0, 5695.0], [1083.0, 5687.0], [1081.0, 5778.0], [1077.0, 5576.0], [1073.0, 5730.0], [1039.0, 6073.0], [1037.0, 6099.0], [1035.0, 6141.0], [1033.0, 6031.0], [1031.0, 6155.5], [1029.0, 6122.0], [1027.0, 6208.0], [1025.0, 5905.0], [1055.0, 5936.0], [1053.0, 5952.5], [1051.0, 5975.0], [1049.0, 5963.0], [1047.0, 5664.0], [1045.0, 5983.0], [1043.0, 6013.0], [1041.0, 5703.0], [1149.0, 4986.0], [1151.0, 5005.0], [1123.0, 5207.5], [1125.0, 5170.0], [1127.0, 5126.0], [1129.0, 5179.0], [1131.0, 4816.0], [1133.0, 5143.0], [1135.0, 5038.0], [1147.0, 5071.5], [1145.0, 5063.0], [1141.0, 4720.0], [1139.0, 5008.0], [1137.0, 5094.0], [1089.0, 5611.0], [1091.0, 5540.0], [1093.0, 5456.0], [1097.0, 5308.5], [1095.0, 5488.0], [1099.0, 5015.0], [1101.0, 5394.0], [1103.0, 5342.0], [1117.0, 5295.5], [1115.0, 5328.5], [1109.0, 5264.0], [1107.0, 5332.0], [1105.0, 5261.0], [1203.0, 4496.0], [1185.0, 4439.0], [1187.0, 4788.5], [1189.0, 4719.0], [1193.0, 4738.0], [1195.0, 4659.0], [1197.0, 4633.0], [1199.0, 4558.0], [1207.0, 4475.0], [1201.0, 4518.0], [1167.0, 4722.0], [1159.0, 4904.0], [1157.0, 4940.0], [1155.0, 4960.0], [1153.0, 4930.0], [1181.0, 4736.0], [1179.0, 4829.0], [1177.0, 4828.0], [1175.0, 4797.0], [1173.0, 4849.0], [1171.0, 4834.5], [1169.0, 4702.0], [1277.0, 3596.0], [1279.0, 3576.0], [1249.0, 4015.0], [1251.0, 4001.0], [1255.0, 3765.0], [1253.0, 3680.0], [1257.0, 3953.0], [1259.0, 3886.0], [1261.0, 3744.0], [1263.0, 3721.0], [1273.0, 3659.0], [1271.0, 3657.0], [1269.0, 3645.0], [1267.0, 3608.0], [1265.0, 3712.0], [1247.0, 3941.0], [1217.0, 4112.0], [1219.0, 4076.0], [1221.0, 4340.0], [1227.0, 4293.0], [1229.0, 4016.0], [1231.0, 4306.0], [1245.0, 4026.0], [1243.0, 4044.0], [1241.0, 4132.0], [1239.0, 4104.5], [1237.0, 4146.0], [1235.0, 3874.0], [1233.0, 4210.0], [1341.0, 2543.0], [1343.0, 2174.0], [1313.0, 2944.0], [1315.0, 2735.0], [1317.0, 2885.0], [1319.0, 2401.0], [1321.0, 2272.0], [1325.0, 2374.5], [1323.0, 2592.5], [1327.0, 2279.0], [1339.0, 2220.0], [1337.0, 2133.0], [1335.0, 2175.0], [1333.0, 2443.0], [1331.0, 2331.0], [1329.0, 2355.0], [1311.0, 2613.0], [1281.0, 3147.0], [1283.0, 3249.0], [1287.0, 3237.5], [1285.0, 3442.0], [1289.0, 3060.0], [1291.0, 3514.0], [1293.0, 3495.0], [1295.0, 3243.0], [1309.0, 2949.0], [1305.0, 2617.0], [1303.0, 2768.0], [1301.0, 3179.0], [1299.0, 2945.0], [1297.0, 2929.0], [1403.0, 2443.0], [1407.0, 1859.0], [1379.0, 1973.0], [1377.0, 1951.0], [1381.0, 2490.0], [1383.0, 1997.0], [1385.0, 1990.0], [1387.0, 1918.0], [1389.0, 1978.0], [1391.0, 1950.0], [1405.0, 2142.0], [1401.0, 2292.0], [1399.0, 1922.0], [1395.0, 2455.0], [1393.0, 2459.0], [1345.0, 2492.0], [1349.0, 2149.0], [1351.0, 2305.0], [1353.0, 2114.0], [1355.0, 1991.0], [1359.0, 1990.0], [1373.0, 1984.0], [1371.0, 1923.0], [1369.0, 2195.0], [1367.0, 2031.0], [1365.0, 1930.0], [1363.0, 2042.0], [1361.0, 1931.0], [1469.0, 1508.0], [1471.0, 1364.0], [1441.0, 1620.0], [1443.0, 2051.0], [1447.0, 2192.0], [1449.0, 1711.0], [1451.0, 2163.0], [1453.0, 1598.0], [1455.0, 1605.0], [1467.0, 1459.0], [1465.0, 1509.0], [1463.0, 1598.0], [1461.0, 2096.0], [1459.0, 1575.0], [1457.0, 2143.5], [1423.0, 1806.5], [1421.0, 1846.0], [1419.0, 1871.0], [1417.0, 1923.0], [1415.0, 2076.0], [1413.0, 2415.0], [1411.0, 1922.0], [1409.0, 1864.0], [1439.0, 1768.0], [1437.0, 1694.0], [1435.0, 1791.0], [1433.0, 1711.0], [1431.0, 2306.0], [1429.0, 1792.0], [1427.0, 1809.0], [1425.0, 1881.0], [1479.0, 1583.0], [1495.0, 1037.0], [1477.0, 1277.0], [1475.0, 1335.0], [1481.0, 1691.0], [1483.0, 1555.0], [1485.0, 1533.0], [1487.0, 962.0], [1497.0, 893.0], [1493.0, 1189.0], [1491.0, 1339.0], [1489.0, 1370.0], [1.0, 14889.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[750.6580000000008, 8574.802666666657]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1219.8333333333333, "minX": 1.7330208E12, "maxY": 8216.083333333334, "series": [{"data": [[1.7330208E12, 8216.083333333334], [1.73302086E12, 4948.916666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7330208E12, 2030.1666666666667], [1.73302086E12, 1219.8333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302086E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5881.200640341518, "minX": 1.7330208E12, "maxY": 13057.760213143869, "series": [{"data": [[1.7330208E12, 5881.200640341518], [1.73302086E12, 13057.760213143869]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302086E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5880.643543223056, "minX": 1.7330208E12, "maxY": 13057.735346358792, "series": [{"data": [[1.7330208E12, 5880.643543223056], [1.73302086E12, 13057.735346358792]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302086E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 122.13499111900533, "minX": 1.7330208E12, "maxY": 162.72572038420492, "series": [{"data": [[1.7330208E12, 162.72572038420492], [1.73302086E12, 122.13499111900533]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302086E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 381.0, "minX": 1.7330208E12, "maxY": 15756.0, "series": [{"data": [[1.7330208E12, 10599.0], [1.73302086E12, 15756.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7330208E12, 9518.2], [1.73302086E12, 14882.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7330208E12, 10237.78], [1.73302086E12, 15733.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7330208E12, 9839.0], [1.73302086E12, 15356.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7330208E12, 381.0], [1.73302086E12, 10168.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7330208E12, 6075.0], [1.73302086E12, 13318.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302086E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 662.0, "minX": 3.0, "maxY": 14866.0, "series": [{"data": [[145.0, 13697.0], [157.0, 1990.0], [162.0, 14866.0], [3.0, 662.0], [52.0, 3160.0], [57.0, 12505.0], [70.0, 4108.5], [90.0, 9848.0], [23.0, 1287.0], [93.0, 6962.0], [96.0, 10814.0], [103.0, 11569.0], [111.0, 5034.0], [109.0, 8038.0], [114.0, 6119.5], [115.0, 9067.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 162.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 523.0, "minX": 3.0, "maxY": 14866.0, "series": [{"data": [[145.0, 13697.0], [157.0, 1990.0], [162.0, 14866.0], [3.0, 523.0], [52.0, 3160.0], [57.0, 12505.0], [70.0, 4108.5], [90.0, 9848.0], [23.0, 1287.0], [93.0, 6961.0], [96.0, 10814.0], [103.0, 11569.0], [111.0, 5034.0], [109.0, 8038.0], [114.0, 6119.0], [115.0, 9067.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 162.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7330208E12, "maxY": 25.0, "series": [{"data": [[1.7330208E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7330208E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9.383333333333333, "minX": 1.7330208E12, "maxY": 15.616666666666667, "series": [{"data": [[1.7330208E12, 15.616666666666667], [1.73302086E12, 9.383333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302086E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9.383333333333333, "minX": 1.7330208E12, "maxY": 15.616666666666667, "series": [{"data": [[1.7330208E12, 15.616666666666667], [1.73302086E12, 9.383333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302086E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.383333333333333, "minX": 1.7330208E12, "maxY": 15.616666666666667, "series": [{"data": [[1.7330208E12, 15.616666666666667], [1.73302086E12, 9.383333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302086E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

