/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 314.0, "minX": 0.0, "maxY": 13495.0, "series": [{"data": [[0.0, 314.0], [0.1, 389.0], [0.2, 875.0], [0.3, 916.0], [0.4, 924.0], [0.5, 995.0], [0.6, 1031.0], [0.7, 1036.0], [0.8, 1039.0], [0.9, 1041.0], [1.0, 1077.0], [1.1, 1083.0], [1.2, 1097.0], [1.3, 1193.0], [1.4, 1233.0], [1.5, 1247.0], [1.6, 1260.0], [1.7, 1261.0], [1.8, 1287.0], [1.9, 1291.0], [2.0, 1318.0], [2.1, 1320.0], [2.2, 1335.0], [2.3, 1361.0], [2.4, 1368.0], [2.5, 1383.0], [2.6, 1443.0], [2.7, 1484.0], [2.8, 1601.0], [2.9, 1618.0], [3.0, 1618.0], [3.1, 1628.0], [3.2, 1636.0], [3.3, 1653.0], [3.4, 1665.0], [3.5, 1678.0], [3.6, 1684.0], [3.7, 1701.0], [3.8, 1702.0], [3.9, 1706.0], [4.0, 1709.0], [4.1, 1724.0], [4.2, 1729.0], [4.3, 1733.0], [4.4, 1738.0], [4.5, 1765.0], [4.6, 1768.0], [4.7, 1781.0], [4.8, 1788.0], [4.9, 1798.0], [5.0, 1800.0], [5.1, 1802.0], [5.2, 1804.0], [5.3, 1811.0], [5.4, 1813.0], [5.5, 1817.0], [5.6, 1820.0], [5.7, 1823.0], [5.8, 1823.0], [5.9, 1825.0], [6.0, 1826.0], [6.1, 1828.0], [6.2, 1839.0], [6.3, 1839.0], [6.4, 1843.0], [6.5, 1851.0], [6.6, 1858.0], [6.7, 1863.0], [6.8, 1873.0], [6.9, 1876.0], [7.0, 1885.0], [7.1, 1890.0], [7.2, 1900.0], [7.3, 1906.0], [7.4, 1918.0], [7.5, 1918.0], [7.6, 1921.0], [7.7, 1924.0], [7.8, 1931.0], [7.9, 1932.0], [8.0, 1935.0], [8.1, 1936.0], [8.2, 1936.0], [8.3, 1937.0], [8.4, 1941.0], [8.5, 1946.0], [8.6, 1953.0], [8.7, 1956.0], [8.8, 1960.0], [8.9, 1963.0], [9.0, 1966.0], [9.1, 1974.0], [9.2, 1986.0], [9.3, 1986.0], [9.4, 1994.0], [9.5, 2005.0], [9.6, 2017.0], [9.7, 2017.0], [9.8, 2017.0], [9.9, 2030.0], [10.0, 2043.0], [10.1, 2043.0], [10.2, 2046.0], [10.3, 2053.0], [10.4, 2057.0], [10.5, 2071.0], [10.6, 2072.0], [10.7, 2074.0], [10.8, 2085.0], [10.9, 2087.0], [11.0, 2089.0], [11.1, 2099.0], [11.2, 2106.0], [11.3, 2110.0], [11.4, 2116.0], [11.5, 2118.0], [11.6, 2127.0], [11.7, 2131.0], [11.8, 2140.0], [11.9, 2143.0], [12.0, 2154.0], [12.1, 2156.0], [12.2, 2157.0], [12.3, 2160.0], [12.4, 2163.0], [12.5, 2164.0], [12.6, 2167.0], [12.7, 2185.0], [12.8, 2197.0], [12.9, 2199.0], [13.0, 2261.0], [13.1, 2267.0], [13.2, 2334.0], [13.3, 2370.0], [13.4, 2474.0], [13.5, 2520.0], [13.6, 2527.0], [13.7, 2527.0], [13.8, 2543.0], [13.9, 2543.0], [14.0, 2567.0], [14.1, 2614.0], [14.2, 2642.0], [14.3, 2644.0], [14.4, 2659.0], [14.5, 2715.0], [14.6, 2766.0], [14.7, 2768.0], [14.8, 2826.0], [14.9, 2833.0], [15.0, 2872.0], [15.1, 2872.0], [15.2, 2880.0], [15.3, 2892.0], [15.4, 2907.0], [15.5, 2910.0], [15.6, 2931.0], [15.7, 2934.0], [15.8, 2949.0], [15.9, 2963.0], [16.0, 2989.0], [16.1, 2993.0], [16.2, 3029.0], [16.3, 3077.0], [16.4, 3081.0], [16.5, 3082.0], [16.6, 3082.0], [16.7, 3096.0], [16.8, 3130.0], [16.9, 3141.0], [17.0, 3152.0], [17.1, 3157.0], [17.2, 3201.0], [17.3, 3204.0], [17.4, 3219.0], [17.5, 3228.0], [17.6, 3235.0], [17.7, 3239.0], [17.8, 3275.0], [17.9, 3276.0], [18.0, 3279.0], [18.1, 3281.0], [18.2, 3290.0], [18.3, 3307.0], [18.4, 3319.0], [18.5, 3336.0], [18.6, 3379.0], [18.7, 3391.0], [18.8, 3405.0], [18.9, 3414.0], [19.0, 3469.0], [19.1, 3469.0], [19.2, 3485.0], [19.3, 3497.0], [19.4, 3503.0], [19.5, 3510.0], [19.6, 3518.0], [19.7, 3538.0], [19.8, 3547.0], [19.9, 3547.0], [20.0, 3582.0], [20.1, 3585.0], [20.2, 3589.0], [20.3, 3591.0], [20.4, 3592.0], [20.5, 3594.0], [20.6, 3599.0], [20.7, 3609.0], [20.8, 3621.0], [20.9, 3626.0], [21.0, 3655.0], [21.1, 3667.0], [21.2, 3676.0], [21.3, 3676.0], [21.4, 3688.0], [21.5, 3692.0], [21.6, 3699.0], [21.7, 3703.0], [21.8, 3716.0], [21.9, 3716.0], [22.0, 3723.0], [22.1, 3731.0], [22.2, 3739.0], [22.3, 3746.0], [22.4, 3781.0], [22.5, 3789.0], [22.6, 3810.0], [22.7, 3825.0], [22.8, 3825.0], [22.9, 3839.0], [23.0, 3856.0], [23.1, 3866.0], [23.2, 3941.0], [23.3, 3957.0], [23.4, 3997.0], [23.5, 4006.0], [23.6, 4112.0], [23.7, 4127.0], [23.8, 4168.0], [23.9, 4194.0], [24.0, 4205.0], [24.1, 4218.0], [24.2, 4234.0], [24.3, 4242.0], [24.4, 4245.0], [24.5, 4245.0], [24.6, 4251.0], [24.7, 4254.0], [24.8, 4269.0], [24.9, 4269.0], [25.0, 4273.0], [25.1, 4284.0], [25.2, 4299.0], [25.3, 4310.0], [25.4, 4326.0], [25.5, 4329.0], [25.6, 4341.0], [25.7, 4342.0], [25.8, 4370.0], [25.9, 4372.0], [26.0, 4401.0], [26.1, 4402.0], [26.2, 4434.0], [26.3, 4434.0], [26.4, 4442.0], [26.5, 4446.0], [26.6, 4480.0], [26.7, 4495.0], [26.8, 4506.0], [26.9, 4511.0], [27.0, 4533.0], [27.1, 4551.0], [27.2, 4571.0], [27.3, 4578.0], [27.4, 4589.0], [27.5, 4590.0], [27.6, 4606.0], [27.7, 4617.0], [27.8, 4624.0], [27.9, 4633.0], [28.0, 4646.0], [28.1, 4646.0], [28.2, 4649.0], [28.3, 4652.0], [28.4, 4655.0], [28.5, 4658.0], [28.6, 4688.0], [28.7, 4693.0], [28.8, 4727.0], [28.9, 4736.0], [29.0, 4755.0], [29.1, 4763.0], [29.2, 4777.0], [29.3, 4777.0], [29.4, 4784.0], [29.5, 4785.0], [29.6, 4789.0], [29.7, 4790.0], [29.8, 4798.0], [29.9, 4806.0], [30.0, 4818.0], [30.1, 4825.0], [30.2, 4835.0], [30.3, 4851.0], [30.4, 4853.0], [30.5, 4868.0], [30.6, 4879.0], [30.7, 4893.0], [30.8, 4900.0], [30.9, 4901.0], [31.0, 4957.0], [31.1, 4965.0], [31.2, 4996.0], [31.3, 5018.0], [31.4, 5056.0], [31.5, 5066.0], [31.6, 5115.0], [31.7, 5159.0], [31.8, 5191.0], [31.9, 5210.0], [32.0, 5227.0], [32.1, 5230.0], [32.2, 5248.0], [32.3, 5257.0], [32.4, 5257.0], [32.5, 5269.0], [32.6, 5276.0], [32.7, 5279.0], [32.8, 5292.0], [32.9, 5297.0], [33.0, 5308.0], [33.1, 5323.0], [33.2, 5351.0], [33.3, 5354.0], [33.4, 5386.0], [33.5, 5398.0], [33.6, 5420.0], [33.7, 5442.0], [33.8, 5492.0], [33.9, 5496.0], [34.0, 5529.0], [34.1, 5540.0], [34.2, 5554.0], [34.3, 5559.0], [34.4, 5564.0], [34.5, 5605.0], [34.6, 5606.0], [34.7, 5624.0], [34.8, 5626.0], [34.9, 5639.0], [35.0, 5657.0], [35.1, 5668.0], [35.2, 5687.0], [35.3, 5751.0], [35.4, 5764.0], [35.5, 5775.0], [35.6, 5776.0], [35.7, 5794.0], [35.8, 5794.0], [35.9, 5798.0], [36.0, 5807.0], [36.1, 5863.0], [36.2, 5910.0], [36.3, 5970.0], [36.4, 5987.0], [36.5, 6009.0], [36.6, 6015.0], [36.7, 6030.0], [36.8, 6030.0], [36.9, 6041.0], [37.0, 6045.0], [37.1, 6056.0], [37.2, 6065.0], [37.3, 6080.0], [37.4, 6084.0], [37.5, 6096.0], [37.6, 6096.0], [37.7, 6115.0], [37.8, 6135.0], [37.9, 6165.0], [38.0, 6171.0], [38.1, 6184.0], [38.2, 6216.0], [38.3, 6265.0], [38.4, 6266.0], [38.5, 6324.0], [38.6, 6370.0], [38.7, 6426.0], [38.8, 6428.0], [38.9, 6438.0], [39.0, 6442.0], [39.1, 6457.0], [39.2, 6462.0], [39.3, 6464.0], [39.4, 6467.0], [39.5, 6487.0], [39.6, 6488.0], [39.7, 6497.0], [39.8, 6516.0], [39.9, 6528.0], [40.0, 6542.0], [40.1, 6543.0], [40.2, 6543.0], [40.3, 6545.0], [40.4, 6554.0], [40.5, 6574.0], [40.6, 6583.0], [40.7, 6595.0], [40.8, 6599.0], [40.9, 6604.0], [41.0, 6612.0], [41.1, 6613.0], [41.2, 6616.0], [41.3, 6658.0], [41.4, 6665.0], [41.5, 6675.0], [41.6, 6681.0], [41.7, 6722.0], [41.8, 6724.0], [41.9, 6774.0], [42.0, 6778.0], [42.1, 6788.0], [42.2, 6792.0], [42.3, 6807.0], [42.4, 6811.0], [42.5, 6818.0], [42.6, 6821.0], [42.7, 6841.0], [42.8, 6845.0], [42.9, 6848.0], [43.0, 6858.0], [43.1, 6867.0], [43.2, 6872.0], [43.3, 6883.0], [43.4, 6884.0], [43.5, 6897.0], [43.6, 6900.0], [43.7, 6908.0], [43.8, 6917.0], [43.9, 6940.0], [44.0, 6949.0], [44.1, 6967.0], [44.2, 6968.0], [44.3, 6971.0], [44.4, 6975.0], [44.5, 6978.0], [44.6, 6980.0], [44.7, 7001.0], [44.8, 7011.0], [44.9, 7013.0], [45.0, 7041.0], [45.1, 7050.0], [45.2, 7063.0], [45.3, 7070.0], [45.4, 7082.0], [45.5, 7095.0], [45.6, 7101.0], [45.7, 7157.0], [45.8, 7163.0], [45.9, 7207.0], [46.0, 7220.0], [46.1, 7252.0], [46.2, 7259.0], [46.3, 7270.0], [46.4, 7271.0], [46.5, 7288.0], [46.6, 7298.0], [46.7, 7322.0], [46.8, 7329.0], [46.9, 7340.0], [47.0, 7346.0], [47.1, 7350.0], [47.2, 7357.0], [47.3, 7361.0], [47.4, 7363.0], [47.5, 7374.0], [47.6, 7376.0], [47.7, 7381.0], [47.8, 7391.0], [47.9, 7449.0], [48.0, 7471.0], [48.1, 7654.0], [48.2, 7672.0], [48.3, 7706.0], [48.4, 7711.0], [48.5, 7735.0], [48.6, 7748.0], [48.7, 7778.0], [48.8, 7784.0], [48.9, 7793.0], [49.0, 7820.0], [49.1, 7833.0], [49.2, 7856.0], [49.3, 7875.0], [49.4, 7896.0], [49.5, 7899.0], [49.6, 7906.0], [49.7, 7910.0], [49.8, 7922.0], [49.9, 7955.0], [50.0, 7967.0], [50.1, 8099.0], [50.2, 8115.0], [50.3, 8117.0], [50.4, 8118.0], [50.5, 8125.0], [50.6, 8136.0], [50.7, 8152.0], [50.8, 8156.0], [50.9, 8159.0], [51.0, 8159.0], [51.1, 8181.0], [51.2, 8184.0], [51.3, 8193.0], [51.4, 8198.0], [51.5, 8224.0], [51.6, 8227.0], [51.7, 8248.0], [51.8, 8292.0], [51.9, 8362.0], [52.0, 8386.0], [52.1, 8409.0], [52.2, 8410.0], [52.3, 8419.0], [52.4, 8420.0], [52.5, 8429.0], [52.6, 8433.0], [52.7, 8440.0], [52.8, 8441.0], [52.9, 8444.0], [53.0, 8446.0], [53.1, 8452.0], [53.2, 8457.0], [53.3, 8464.0], [53.4, 8466.0], [53.5, 8476.0], [53.6, 8477.0], [53.7, 8481.0], [53.8, 8484.0], [53.9, 8492.0], [54.0, 8496.0], [54.1, 8499.0], [54.2, 8501.0], [54.3, 8512.0], [54.4, 8515.0], [54.5, 8547.0], [54.6, 8560.0], [54.7, 8639.0], [54.8, 8642.0], [54.9, 8653.0], [55.0, 8654.0], [55.1, 8662.0], [55.2, 8679.0], [55.3, 8681.0], [55.4, 8685.0], [55.5, 8686.0], [55.6, 8693.0], [55.7, 8712.0], [55.8, 8714.0], [55.9, 8718.0], [56.0, 8720.0], [56.1, 8758.0], [56.2, 8761.0], [56.3, 8764.0], [56.4, 8765.0], [56.5, 8789.0], [56.6, 8790.0], [56.7, 8840.0], [56.8, 8841.0], [56.9, 8862.0], [57.0, 8869.0], [57.1, 8883.0], [57.2, 8910.0], [57.3, 8920.0], [57.4, 8923.0], [57.5, 8948.0], [57.6, 8954.0], [57.7, 8962.0], [57.8, 8967.0], [57.9, 8972.0], [58.0, 8978.0], [58.1, 8992.0], [58.2, 8997.0], [58.3, 9017.0], [58.4, 9018.0], [58.5, 9033.0], [58.6, 9048.0], [58.7, 9069.0], [58.8, 9080.0], [58.9, 9094.0], [59.0, 9100.0], [59.1, 9111.0], [59.2, 9117.0], [59.3, 9124.0], [59.4, 9129.0], [59.5, 9131.0], [59.6, 9134.0], [59.7, 9154.0], [59.8, 9158.0], [59.9, 9173.0], [60.0, 9181.0], [60.1, 9182.0], [60.2, 9187.0], [60.3, 9210.0], [60.4, 9217.0], [60.5, 9221.0], [60.6, 9222.0], [60.7, 9236.0], [60.8, 9239.0], [60.9, 9256.0], [61.0, 9260.0], [61.1, 9275.0], [61.2, 9279.0], [61.3, 9295.0], [61.4, 9307.0], [61.5, 9320.0], [61.6, 9340.0], [61.7, 9350.0], [61.8, 9351.0], [61.9, 9355.0], [62.0, 9360.0], [62.1, 9376.0], [62.2, 9383.0], [62.3, 9388.0], [62.4, 9395.0], [62.5, 9399.0], [62.6, 9407.0], [62.7, 9412.0], [62.8, 9416.0], [62.9, 9438.0], [63.0, 9438.0], [63.1, 9452.0], [63.2, 9454.0], [63.3, 9492.0], [63.4, 9501.0], [63.5, 9518.0], [63.6, 9520.0], [63.7, 9526.0], [63.8, 9527.0], [63.9, 9539.0], [64.0, 9541.0], [64.1, 9543.0], [64.2, 9546.0], [64.3, 9560.0], [64.4, 9621.0], [64.5, 9655.0], [64.6, 9661.0], [64.7, 9671.0], [64.8, 9682.0], [64.9, 9693.0], [65.0, 9702.0], [65.1, 9711.0], [65.2, 9712.0], [65.3, 9733.0], [65.4, 9734.0], [65.5, 9754.0], [65.6, 9762.0], [65.7, 9776.0], [65.8, 9778.0], [65.9, 9779.0], [66.0, 9781.0], [66.1, 9789.0], [66.2, 9815.0], [66.3, 9856.0], [66.4, 9857.0], [66.5, 9861.0], [66.6, 9864.0], [66.7, 9880.0], [66.8, 9881.0], [66.9, 9883.0], [67.0, 9903.0], [67.1, 9922.0], [67.2, 9930.0], [67.3, 9943.0], [67.4, 9945.0], [67.5, 9949.0], [67.6, 9959.0], [67.7, 9983.0], [67.8, 9988.0], [67.9, 10001.0], [68.0, 10005.0], [68.1, 10007.0], [68.2, 10008.0], [68.3, 10016.0], [68.4, 10019.0], [68.5, 10023.0], [68.6, 10023.0], [68.7, 10026.0], [68.8, 10034.0], [68.9, 10042.0], [69.0, 10053.0], [69.1, 10057.0], [69.2, 10060.0], [69.3, 10091.0], [69.4, 10097.0], [69.5, 10126.0], [69.6, 10136.0], [69.7, 10143.0], [69.8, 10156.0], [69.9, 10165.0], [70.0, 10169.0], [70.1, 10182.0], [70.2, 10184.0], [70.3, 10197.0], [70.4, 10197.0], [70.5, 10200.0], [70.6, 10204.0], [70.7, 10211.0], [70.8, 10214.0], [70.9, 10229.0], [71.0, 10239.0], [71.1, 10283.0], [71.2, 10284.0], [71.3, 10300.0], [71.4, 10304.0], [71.5, 10315.0], [71.6, 10315.0], [71.7, 10318.0], [71.8, 10319.0], [71.9, 10329.0], [72.0, 10337.0], [72.1, 10342.0], [72.2, 10346.0], [72.3, 10356.0], [72.4, 10358.0], [72.5, 10372.0], [72.6, 10401.0], [72.7, 10437.0], [72.8, 10441.0], [72.9, 10493.0], [73.0, 10499.0], [73.1, 10515.0], [73.2, 10523.0], [73.3, 10564.0], [73.4, 10622.0], [73.5, 10634.0], [73.6, 10637.0], [73.7, 10653.0], [73.8, 10674.0], [73.9, 10684.0], [74.0, 10688.0], [74.1, 10692.0], [74.2, 10719.0], [74.3, 10759.0], [74.4, 10771.0], [74.5, 10797.0], [74.6, 10798.0], [74.7, 10803.0], [74.8, 10807.0], [74.9, 10819.0], [75.0, 10837.0], [75.1, 10843.0], [75.2, 10873.0], [75.3, 10897.0], [75.4, 10899.0], [75.5, 10908.0], [75.6, 10919.0], [75.7, 10950.0], [75.8, 10959.0], [75.9, 10985.0], [76.0, 10995.0], [76.1, 11020.0], [76.2, 11034.0], [76.3, 11055.0], [76.4, 11121.0], [76.5, 11143.0], [76.6, 11151.0], [76.7, 11166.0], [76.8, 11168.0], [76.9, 11171.0], [77.0, 11178.0], [77.1, 11198.0], [77.2, 11219.0], [77.3, 11243.0], [77.4, 11244.0], [77.5, 11279.0], [77.6, 11284.0], [77.7, 11307.0], [77.8, 11325.0], [77.9, 11328.0], [78.0, 11332.0], [78.1, 11340.0], [78.2, 11340.0], [78.3, 11343.0], [78.4, 11344.0], [78.5, 11349.0], [78.6, 11358.0], [78.7, 11380.0], [78.8, 11381.0], [78.9, 11390.0], [79.0, 11392.0], [79.1, 11415.0], [79.2, 11425.0], [79.3, 11505.0], [79.4, 11511.0], [79.5, 11542.0], [79.6, 11556.0], [79.7, 11565.0], [79.8, 11566.0], [79.9, 11647.0], [80.0, 11649.0], [80.1, 11693.0], [80.2, 11699.0], [80.3, 11727.0], [80.4, 11746.0], [80.5, 11779.0], [80.6, 11798.0], [80.7, 11810.0], [80.8, 11822.0], [80.9, 11836.0], [81.0, 11853.0], [81.1, 11863.0], [81.2, 11866.0], [81.3, 11877.0], [81.4, 11885.0], [81.5, 11905.0], [81.6, 11909.0], [81.7, 11928.0], [81.8, 11937.0], [81.9, 11953.0], [82.0, 11957.0], [82.1, 11963.0], [82.2, 11971.0], [82.3, 11975.0], [82.4, 11977.0], [82.5, 11986.0], [82.6, 11993.0], [82.7, 11999.0], [82.8, 12003.0], [82.9, 12005.0], [83.0, 12007.0], [83.1, 12013.0], [83.2, 12016.0], [83.3, 12018.0], [83.4, 12026.0], [83.5, 12047.0], [83.6, 12050.0], [83.7, 12068.0], [83.8, 12072.0], [83.9, 12079.0], [84.0, 12086.0], [84.1, 12129.0], [84.2, 12181.0], [84.3, 12204.0], [84.4, 12206.0], [84.5, 12238.0], [84.6, 12245.0], [84.7, 12267.0], [84.8, 12275.0], [84.9, 12297.0], [85.0, 12302.0], [85.1, 12309.0], [85.2, 12316.0], [85.3, 12327.0], [85.4, 12329.0], [85.5, 12341.0], [85.6, 12342.0], [85.7, 12349.0], [85.8, 12350.0], [85.9, 12360.0], [86.0, 12392.0], [86.1, 12399.0], [86.2, 12408.0], [86.3, 12418.0], [86.4, 12440.0], [86.5, 12453.0], [86.6, 12455.0], [86.7, 12466.0], [86.8, 12472.0], [86.9, 12487.0], [87.0, 12520.0], [87.1, 12525.0], [87.2, 12527.0], [87.3, 12547.0], [87.4, 12547.0], [87.5, 12549.0], [87.6, 12581.0], [87.7, 12597.0], [87.8, 12601.0], [87.9, 12607.0], [88.0, 12613.0], [88.1, 12622.0], [88.2, 12623.0], [88.3, 12646.0], [88.4, 12656.0], [88.5, 12658.0], [88.6, 12661.0], [88.7, 12669.0], [88.8, 12710.0], [88.9, 12736.0], [89.0, 12753.0], [89.1, 12783.0], [89.2, 12800.0], [89.3, 12804.0], [89.4, 12809.0], [89.5, 12818.0], [89.6, 12820.0], [89.7, 12854.0], [89.8, 12865.0], [89.9, 12922.0], [90.0, 12930.0], [90.1, 12968.0], [90.2, 12971.0], [90.3, 12971.0], [90.4, 12979.0], [90.5, 12984.0], [90.6, 12995.0], [90.7, 13027.0], [90.8, 13030.0], [90.9, 13045.0], [91.0, 13061.0], [91.1, 13081.0], [91.2, 13092.0], [91.3, 13109.0], [91.4, 13132.0], [91.5, 13151.0], [91.6, 13152.0], [91.7, 13163.0], [91.8, 13173.0], [91.9, 13177.0], [92.0, 13182.0], [92.1, 13185.0], [92.2, 13190.0], [92.3, 13191.0], [92.4, 13203.0], [92.5, 13205.0], [92.6, 13221.0], [92.7, 13224.0], [92.8, 13242.0], [92.9, 13248.0], [93.0, 13256.0], [93.1, 13258.0], [93.2, 13265.0], [93.3, 13270.0], [93.4, 13272.0], [93.5, 13273.0], [93.6, 13283.0], [93.7, 13284.0], [93.8, 13289.0], [93.9, 13290.0], [94.0, 13293.0], [94.1, 13294.0], [94.2, 13299.0], [94.3, 13300.0], [94.4, 13304.0], [94.5, 13305.0], [94.6, 13309.0], [94.7, 13309.0], [94.8, 13312.0], [94.9, 13312.0], [95.0, 13313.0], [95.1, 13318.0], [95.2, 13319.0], [95.3, 13321.0], [95.4, 13326.0], [95.5, 13326.0], [95.6, 13330.0], [95.7, 13332.0], [95.8, 13333.0], [95.9, 13334.0], [96.0, 13337.0], [96.1, 13342.0], [96.2, 13345.0], [96.3, 13346.0], [96.4, 13347.0], [96.5, 13348.0], [96.6, 13353.0], [96.7, 13354.0], [96.8, 13355.0], [96.9, 13355.0], [97.0, 13356.0], [97.1, 13356.0], [97.2, 13361.0], [97.3, 13362.0], [97.4, 13365.0], [97.5, 13366.0], [97.6, 13370.0], [97.7, 13371.0], [97.8, 13372.0], [97.9, 13373.0], [98.0, 13375.0], [98.1, 13375.0], [98.2, 13379.0], [98.3, 13379.0], [98.4, 13381.0], [98.5, 13384.0], [98.6, 13390.0], [98.7, 13390.0], [98.8, 13395.0], [98.9, 13397.0], [99.0, 13400.0], [99.1, 13401.0], [99.2, 13404.0], [99.3, 13404.0], [99.4, 13408.0], [99.5, 13412.0], [99.6, 13419.0], [99.7, 13421.0], [99.8, 13451.0], [99.9, 13473.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 71.0, "series": [{"data": [[300.0, 2.0], [600.0, 1.0], [800.0, 1.0], [900.0, 4.0], [1000.0, 11.0], [1100.0, 1.0], [1200.0, 9.0], [1300.0, 9.0], [1400.0, 3.0], [1600.0, 14.0], [1700.0, 19.0], [1800.0, 34.0], [1900.0, 34.0], [2000.0, 25.0], [2100.0, 27.0], [2200.0, 3.0], [2300.0, 4.0], [2400.0, 1.0], [2500.0, 9.0], [2600.0, 6.0], [2800.0, 10.0], [2700.0, 4.0], [2900.0, 11.0], [3000.0, 9.0], [3100.0, 7.0], [3200.0, 16.0], [3300.0, 8.0], [3400.0, 9.0], [3500.0, 19.0], [3600.0, 15.0], [3700.0, 13.0], [3800.0, 10.0], [3900.0, 4.0], [4000.0, 2.0], [4200.0, 20.0], [4100.0, 5.0], [4300.0, 11.0], [4400.0, 12.0], [4500.0, 11.0], [4600.0, 18.0], [4700.0, 17.0], [4800.0, 14.0], [4900.0, 7.0], [5000.0, 5.0], [5100.0, 4.0], [5200.0, 16.0], [5300.0, 9.0], [5400.0, 6.0], [5500.0, 7.0], [5600.0, 12.0], [5700.0, 11.0], [5800.0, 3.0], [5900.0, 5.0], [6000.0, 18.0], [6100.0, 7.0], [6200.0, 5.0], [6300.0, 2.0], [6400.0, 17.0], [6500.0, 17.0], [6600.0, 12.0], [6800.0, 20.0], [6700.0, 8.0], [6900.0, 17.0], [7000.0, 13.0], [7100.0, 5.0], [7200.0, 11.0], [7300.0, 18.0], [7400.0, 3.0], [7600.0, 3.0], [7700.0, 11.0], [7800.0, 9.0], [7900.0, 7.0], [8100.0, 20.0], [8000.0, 2.0], [8200.0, 5.0], [8300.0, 3.0], [8400.0, 32.0], [8500.0, 8.0], [8600.0, 15.0], [8700.0, 15.0], [8900.0, 16.0], [8800.0, 7.0], [9000.0, 11.0], [9100.0, 20.0], [9200.0, 16.0], [9300.0, 18.0], [9400.0, 12.0], [9500.0, 15.0], [9600.0, 9.0], [9700.0, 18.0], [9900.0, 14.0], [9800.0, 12.0], [10000.0, 23.0], [10100.0, 16.0], [10200.0, 12.0], [10300.0, 19.0], [10400.0, 7.0], [10500.0, 5.0], [10600.0, 12.0], [10700.0, 7.0], [10800.0, 12.0], [10900.0, 9.0], [11000.0, 5.0], [11100.0, 12.0], [11200.0, 8.0], [11300.0, 21.0], [11400.0, 3.0], [11500.0, 9.0], [11600.0, 5.0], [11700.0, 6.0], [11800.0, 13.0], [11900.0, 19.0], [12000.0, 19.0], [12100.0, 4.0], [12200.0, 10.0], [12300.0, 18.0], [12400.0, 12.0], [12500.0, 12.0], [12600.0, 15.0], [12700.0, 6.0], [12800.0, 10.0], [12900.0, 12.0], [13000.0, 9.0], [13100.0, 18.0], [13200.0, 28.0], [13300.0, 71.0], [13400.0, 15.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1459.0, "series": [{"data": [[0.0, 2.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 39.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1459.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 37.54054054054053, "minX": 1.73302248E12, "maxY": 470.08196721311464, "series": [{"data": [[1.73302248E12, 470.08196721311464], [1.73302254E12, 220.0956719817769]], "isOverall": false, "label": "test_500", "isController": false}, {"data": [[1.73302248E12, 99.945]], "isOverall": false, "label": "test_200", "isController": false}, {"data": [[1.73302248E12, 50.529999999999966]], "isOverall": false, "label": "test_100", "isController": false}, {"data": [[1.73302248E12, 353.5106382978724], [1.73302254E12, 153.54248366013064]], "isOverall": false, "label": "test_400", "isController": false}, {"data": [[1.73302248E12, 187.5398230088496], [1.73302254E12, 37.54054054054053]], "isOverall": false, "label": "test_300", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302254E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 922.0, "minX": 1.0, "maxY": 13495.0, "series": [{"data": [[3.0, 13353.5], [4.0, 13355.0], [5.0, 13361.0], [6.0, 13362.0], [7.0, 13273.0], [9.0, 13247.0], [11.0, 13304.0], [12.0, 13332.0], [13.0, 13337.0], [14.0, 13348.0], [15.0, 13334.0], [16.0, 13326.0], [17.0, 13300.0], [19.0, 13386.0], [20.0, 13473.0], [21.0, 13390.0], [22.0, 13357.0], [23.0, 13265.0], [25.0, 13374.5], [27.0, 13316.5], [28.0, 13355.0], [29.0, 13366.0], [31.0, 13328.5], [33.0, 13408.0], [32.0, 13379.0], [35.0, 13354.0], [34.0, 13401.0], [37.0, 13377.0], [39.0, 13347.0], [38.0, 13397.0], [41.0, 13403.0], [40.0, 13304.0], [43.0, 13330.0], [42.0, 13495.0], [45.0, 13385.0], [44.0, 13306.0], [47.0, 13399.0], [49.0, 13340.0], [51.0, 13370.0], [50.0, 13376.0], [53.0, 13339.0], [54.0, 13346.0], [57.0, 13319.0], [56.0, 13340.5], [59.0, 13375.0], [58.0, 13326.0], [61.0, 13372.0], [60.0, 13400.0], [63.0, 13347.0], [62.0, 13398.0], [67.0, 13356.0], [66.0, 13329.0], [65.0, 13321.0], [64.0, 13374.0], [71.0, 13203.0], [70.0, 13425.0], [69.0, 13333.5], [75.0, 13345.0], [74.0, 13293.0], [72.0, 13390.0], [79.0, 13352.666666666666], [76.0, 13326.0], [82.0, 13379.0], [81.0, 13419.0], [80.0, 13190.0], [87.0, 13312.0], [86.0, 13294.0], [85.0, 13342.0], [84.0, 13245.0], [91.0, 13260.0], [90.0, 13404.0], [89.0, 13289.0], [88.0, 13406.0], [95.0, 13367.5], [93.0, 13355.0], [92.0, 13395.0], [99.0, 13313.0], [98.0, 13292.0], [97.0, 13182.0], [96.0, 13191.0], [103.0, 13371.0], [102.0, 13333.0], [101.0, 13283.0], [100.0, 13205.0], [107.0, 13249.0], [106.0, 13299.0], [105.0, 13242.0], [104.0, 13294.0], [111.0, 13290.0], [110.0, 13270.0], [109.0, 13216.5], [115.0, 13194.0], [114.0, 13224.0], [113.0, 13294.5], [119.0, 13146.0], [118.0, 13270.0], [117.0, 13287.0], [116.0, 13272.0], [122.0, 13173.0], [121.0, 13256.0], [120.0, 13258.0], [127.0, 13152.0], [126.0, 13163.0], [125.0, 13160.333333333334], [135.0, 13108.0], [134.0, 13132.0], [133.0, 13044.0], [132.0, 13092.0], [131.0, 13045.0], [130.0, 13160.0], [129.0, 13177.0], [128.0, 13151.0], [142.0, 13015.0], [141.0, 12995.0], [140.0, 12971.0], [139.0, 13030.0], [138.0, 13027.0], [137.0, 13064.0], [136.0, 13081.0], [151.0, 12920.0], [150.0, 12979.0], [149.0, 12971.0], [148.0, 12968.0], [147.0, 12984.0], [146.0, 12971.0], [145.0, 12852.0], [144.0, 13012.5], [159.0, 12800.0], [158.0, 12800.0], [157.0, 12854.0], [156.0, 12809.0], [155.0, 12813.0], [154.0, 12952.0], [152.0, 12930.0], [167.0, 12818.0], [166.0, 12770.0], [165.0, 12662.0], [164.0, 12824.0], [162.0, 12804.0], [161.0, 12820.0], [160.0, 12710.0], [175.0, 12753.0], [174.0, 12736.0], [173.0, 12641.5], [171.0, 12606.5], [169.0, 12658.0], [168.0, 12646.0], [183.0, 12547.0], [182.0, 12531.0], [181.0, 12608.333333333334], [178.0, 12715.0], [177.0, 12601.0], [176.0, 12601.0], [191.0, 12466.0], [190.0, 12597.0], [189.0, 12656.0], [188.0, 12547.0], [187.0, 12613.0], [186.0, 12487.0], [185.0, 12658.0], [184.0, 12527.0], [199.0, 12514.5], [197.0, 12623.0], [196.0, 12582.0], [195.0, 12621.0], [194.0, 12522.5], [192.0, 12472.0], [207.0, 12350.0], [206.0, 12360.0], [205.0, 12523.0], [204.0, 12453.0], [203.0, 12440.0], [202.0, 12442.0], [201.0, 12455.0], [200.0, 12456.0], [215.0, 12399.0], [214.0, 12327.0], [213.0, 12414.0], [212.0, 12349.0], [211.0, 12329.0], [210.0, 12345.0], [209.0, 12342.0], [208.0, 12267.0], [223.0, 12352.0], [222.0, 12408.0], [221.0, 12237.0], [220.0, 12282.0], [218.0, 12341.0], [217.0, 12418.0], [216.0, 12399.0], [230.0, 12206.0], [229.0, 12302.0], [228.0, 12297.0], [227.0, 12306.0], [226.0, 12339.5], [224.0, 12320.0], [234.0, 6321.5], [239.0, 12181.0], [238.0, 12067.0], [237.0, 12086.0], [236.0, 12245.0], [235.0, 12238.0], [233.0, 12309.0], [232.0, 12239.5], [247.0, 12016.0], [246.0, 11977.0], [245.0, 12026.0], [244.0, 12197.0], [243.0, 12012.0], [242.0, 12128.0], [241.0, 12129.0], [240.0, 11996.0], [255.0, 12039.0], [254.0, 12072.0], [253.0, 12017.0], [252.0, 11986.0], [251.0, 12050.0], [250.0, 12068.0], [249.0, 12079.0], [248.0, 11999.0], [269.0, 11890.0], [270.0, 12013.0], [268.0, 12018.0], [259.0, 12005.0], [258.0, 12047.0], [257.0, 12072.0], [256.0, 11974.0], [267.0, 11957.0], [266.0, 12003.0], [265.0, 11915.0], [264.0, 11975.0], [263.0, 12005.0], [262.0, 11971.0], [261.0, 11980.0], [260.0, 11993.0], [286.0, 11835.0], [287.0, 11885.0], [285.0, 11853.0], [284.0, 11863.0], [283.0, 11822.0], [282.0, 11909.0], [281.0, 11950.0], [280.0, 11928.0], [279.0, 11957.0], [273.0, 11866.0], [272.0, 11929.0], [275.0, 11937.0], [274.0, 12007.0], [278.0, 11868.0], [277.0, 11963.0], [276.0, 11861.0], [302.0, 11647.0], [301.0, 6041.0], [303.0, 11556.0], [300.0, 11699.0], [299.0, 11649.0], [298.0, 11667.0], [297.0, 11779.0], [296.0, 11753.0], [295.0, 11805.0], [289.0, 11727.0], [288.0, 11877.0], [291.0, 11798.0], [290.0, 11746.0], [294.0, 11810.0], [293.0, 11720.0], [292.0, 11836.0], [318.0, 11415.0], [319.0, 11397.0], [317.0, 11380.0], [316.0, 11389.0], [315.0, 11392.0], [314.0, 11390.0], [313.0, 11425.0], [312.0, 11511.0], [311.0, 11559.0], [305.0, 11535.0], [304.0, 11542.0], [307.0, 11505.0], [306.0, 11571.0], [310.0, 11566.0], [309.0, 11565.0], [308.0, 11440.0], [334.0, 11325.0], [335.0, 11326.0], [333.0, 11343.0], [332.0, 11328.0], [331.0, 11307.0], [330.0, 11244.0], [329.0, 11381.0], [328.0, 11379.0], [327.0, 11332.0], [320.0, 11347.0], [323.0, 11358.0], [322.0, 11309.5], [326.0, 11335.0], [325.0, 11349.0], [324.0, 11340.0], [350.0, 11128.0], [349.0, 11169.0], [338.0, 11287.0], [337.0, 11249.0], [336.0, 11343.0], [347.0, 11178.0], [346.0, 11166.0], [345.0, 11198.0], [344.0, 11196.0], [343.0, 11219.0], [342.0, 11224.0], [341.0, 11243.0], [340.0, 11314.0], [366.0, 10897.0], [367.0, 10942.0], [365.0, 10950.0], [364.0, 10959.0], [363.0, 10974.0], [362.0, 10995.0], [361.0, 10985.0], [360.0, 11053.0], [359.0, 11020.0], [353.0, 11121.0], [352.0, 11164.5], [355.0, 11151.0], [354.0, 11143.0], [358.0, 11055.0], [357.0, 11015.0], [356.0, 11034.0], [382.0, 10798.0], [383.0, 10797.0], [381.0, 10803.0], [380.0, 10807.0], [379.0, 10800.0], [378.0, 10811.0], [377.0, 10819.0], [376.0, 10841.0], [375.0, 10837.0], [369.0, 10908.0], [368.0, 10885.0], [371.0, 10900.0], [370.0, 10919.0], [374.0, 10843.0], [373.0, 10899.0], [372.0, 10873.0], [398.0, 10637.0], [399.0, 10633.0], [397.0, 10634.0], [396.0, 10653.0], [395.0, 10622.0], [394.0, 10688.0], [393.0, 10684.0], [392.0, 10674.0], [391.0, 10688.0], [385.0, 10759.0], [384.0, 10772.0], [387.0, 10743.0], [386.0, 10771.0], [390.0, 10674.0], [389.0, 10692.0], [388.0, 10719.0], [414.0, 10347.0], [415.0, 10372.0], [413.0, 10414.0], [412.0, 10370.0], [411.0, 10401.0], [410.0, 10441.0], [409.0, 10437.0], [408.0, 10493.0], [407.0, 10499.0], [401.0, 10564.0], [400.0, 10648.0], [403.0, 10509.0], [402.0, 10523.0], [406.0, 10526.0], [405.0, 10483.0], [404.0, 10515.0], [428.0, 10297.0], [430.0, 10300.0], [431.0, 10319.0], [429.0, 10281.0], [427.0, 10312.5], [425.0, 10336.5], [423.0, 10339.0], [417.0, 10337.0], [416.0, 10315.0], [419.0, 10318.0], [418.0, 10346.0], [422.0, 10356.0], [421.0, 10315.0], [420.0, 10329.0], [446.0, 10205.0], [447.0, 10143.0], [445.0, 10214.0], [444.0, 10184.5], [443.0, 10183.5], [441.0, 10225.0], [440.0, 10229.0], [439.0, 10211.0], [433.0, 10342.0], [432.0, 10284.0], [435.0, 10317.0], [434.0, 10283.0], [438.0, 10200.0], [436.0, 10239.0], [461.0, 10060.0], [463.0, 10056.0], [460.0, 10111.0], [451.0, 10143.0], [450.0, 10197.0], [449.0, 10175.0], [448.0, 10197.0], [459.0, 10097.0], [458.0, 10136.0], [457.0, 10142.0], [455.0, 10184.0], [454.0, 10169.0], [452.0, 10197.0], [476.0, 10019.0], [478.0, 10006.0], [479.0, 10007.0], [477.0, 10023.5], [474.0, 10034.0], [473.0, 10037.0], [470.0, 10020.0], [469.0, 10025.0], [466.0, 9988.0], [465.0, 10081.0], [464.0, 10091.0], [494.0, 9882.0], [495.0, 9930.0], [493.0, 9928.5], [483.0, 10008.0], [482.0, 10013.5], [481.0, 10005.0], [491.0, 9922.0], [490.0, 9949.0], [489.0, 9959.0], [488.0, 9963.0], [487.0, 9948.0], [486.0, 9943.0], [485.0, 9936.0], [484.0, 9988.0], [510.0, 9779.0], [511.0, 9779.0], [509.0, 9788.0], [508.0, 9789.0], [507.0, 9822.0], [506.0, 9815.0], [505.0, 9856.0], [504.0, 9861.0], [503.0, 9864.0], [497.0, 9903.0], [496.0, 9866.0], [499.0, 9880.0], [498.0, 9881.0], [502.0, 9857.0], [501.0, 9859.0], [500.0, 9883.0], [537.0, 9454.0], [543.0, 9409.0], [532.0, 5109.5], [531.0, 9526.0], [530.0, 9776.0], [529.0, 9771.0], [528.0, 9520.0], [533.0, 9518.0], [542.0, 9416.0], [541.0, 9437.0], [540.0, 9613.0], [536.0, 9478.0], [519.0, 9711.0], [518.0, 9733.0], [517.0, 9712.0], [516.0, 9682.0], [515.0, 9983.0], [514.0, 9727.0], [513.0, 9762.0], [512.0, 9754.0], [527.0, 9539.0], [526.0, 9778.0], [525.0, 9734.0], [524.0, 9781.0], [523.0, 9542.0], [522.0, 9551.0], [521.0, 9560.0], [520.0, 9664.0], [535.0, 9735.0], [534.0, 9705.0], [570.0, 9492.0], [574.0, 9501.0], [575.0, 9217.0], [562.0, 9538.0], [561.0, 9517.5], [564.0, 9541.0], [563.0, 9526.0], [573.0, 9222.0], [572.0, 9236.0], [571.0, 9245.0], [568.0, 9279.0], [551.0, 9385.5], [549.0, 9655.0], [548.0, 9527.0], [546.0, 9671.0], [545.0, 9689.0], [544.0, 9399.0], [559.0, 9313.0], [558.0, 9320.0], [557.0, 9340.0], [556.0, 9360.0], [555.0, 9661.0], [554.0, 9488.0], [552.0, 9376.0], [567.0, 9275.0], [566.0, 9403.5], [602.0, 9156.5], [606.0, 9187.0], [607.0, 9117.0], [593.0, 9264.0], [592.0, 9295.0], [595.0, 9225.0], [594.0, 9307.0], [597.0, 9260.0], [596.0, 9221.0], [605.0, 9173.0], [604.0, 9158.0], [603.0, 9189.0], [600.0, 9182.0], [583.0, 9134.0], [582.0, 9386.0], [581.0, 9395.0], [580.0, 9412.0], [579.0, 9438.0], [578.0, 9398.0], [577.0, 9452.0], [576.0, 9181.0], [591.0, 9256.0], [590.0, 9239.0], [589.0, 9351.0], [588.0, 9358.0], [586.0, 9080.0], [585.0, 9343.0], [584.0, 9350.0], [599.0, 9219.0], [598.0, 9210.0], [636.0, 9017.0], [639.0, 8925.0], [625.0, 9033.0], [624.0, 9054.0], [627.0, 8962.0], [626.0, 8978.0], [629.0, 8972.0], [628.0, 9001.0], [638.0, 8972.0], [637.0, 8979.0], [635.0, 9003.0], [634.0, 8997.0], [633.0, 8948.0], [632.0, 8954.0], [623.0, 9018.0], [608.0, 9129.0], [610.0, 9154.0], [609.0, 9064.0], [612.0, 9100.0], [611.0, 9130.0], [615.0, 9111.0], [614.0, 9153.0], [622.0, 9069.0], [619.0, 9113.0], [617.0, 9094.0], [616.0, 9118.0], [631.0, 8992.0], [630.0, 8923.0], [664.0, 8679.0], [669.0, 8681.0], [670.0, 8653.0], [656.0, 8758.0], [659.0, 8739.5], [657.0, 8761.0], [668.0, 8716.0], [666.0, 8642.0], [665.0, 8650.0], [655.0, 8686.0], [642.0, 8865.5], [640.0, 8967.0], [645.0, 8841.0], [644.0, 8893.0], [647.0, 8920.0], [646.0, 8793.0], [654.0, 8774.0], [652.0, 8789.0], [651.0, 8910.0], [650.0, 8852.0], [649.0, 8883.0], [648.0, 8840.0], [663.0, 8764.0], [662.0, 8753.0], [661.0, 8790.0], [660.0, 8716.0], [699.0, 8458.0], [690.0, 8507.0], [701.0, 8484.0], [702.0, 8477.0], [689.0, 8497.0], [688.0, 8515.0], [700.0, 8475.0], [697.0, 8484.0], [679.0, 8673.5], [677.0, 8654.0], [676.0, 8656.0], [675.0, 8693.0], [674.0, 8694.25], [687.0, 8547.0], [686.0, 8444.0], [685.0, 8477.0], [684.0, 8560.0], [683.0, 8499.0], [682.0, 8560.0], [681.0, 8539.0], [680.0, 8639.0], [695.0, 8501.0], [694.0, 8429.5], [691.0, 8463.0], [732.0, 8159.0], [711.0, 4669.5], [710.0, 8446.0], [709.0, 8473.0], [708.0, 8452.0], [707.0, 8457.0], [706.0, 8441.0], [705.0, 8466.0], [704.0, 8465.0], [719.0, 8409.0], [718.0, 8427.0], [717.0, 8401.0], [716.0, 8411.5], [714.0, 8484.0], [713.0, 8443.0], [712.0, 8429.0], [735.0, 8188.0], [721.0, 8386.0], [720.0, 8433.0], [723.0, 8362.0], [722.0, 8353.0], [725.0, 8248.0], [724.0, 8292.0], [727.0, 8224.0], [726.0, 8193.0], [734.0, 8198.0], [733.0, 8167.0], [731.0, 8198.0], [730.0, 8227.0], [729.0, 8244.0], [728.0, 8159.0], [762.0, 7899.0], [766.0, 7823.0], [758.0, 4406.0], [759.0, 922.0], [767.0, 7820.0], [753.0, 7897.0], [752.0, 7906.0], [755.0, 7875.0], [754.0, 7910.0], [757.0, 7907.0], [756.0, 7936.0], [765.0, 7870.0], [764.0, 7778.0], [763.0, 7856.0], [761.0, 7955.0], [760.0, 7877.5], [751.0, 7967.0], [737.0, 8125.0], [736.0, 8124.0], [739.0, 8152.0], [738.0, 8157.0], [741.0, 8184.0], [740.0, 8117.0], [743.0, 8181.0], [742.0, 8156.0], [750.0, 8136.0], [749.0, 8145.0], [748.0, 8099.0], [747.0, 8115.0], [746.0, 8090.0], [745.0, 8117.0], [744.0, 8118.0], [793.0, 7329.0], [797.0, 7391.0], [798.0, 7357.0], [785.0, 7361.0], [784.0, 7420.0], [787.0, 7381.0], [786.0, 7346.0], [796.0, 7360.0], [795.0, 7367.0], [794.0, 7363.0], [792.0, 7375.0], [775.0, 7711.0], [774.0, 7735.0], [773.0, 7715.0], [772.0, 7789.0], [771.0, 7754.0], [770.0, 7748.0], [769.0, 7788.5], [783.0, 7339.0], [782.0, 7460.0], [780.0, 7601.0], [779.0, 7672.0], [778.0, 7701.0], [777.0, 7706.0], [776.0, 7654.0], [790.0, 7350.0], [789.0, 7361.5], [828.0, 7013.0], [801.0, 4100.0], [815.0, 7101.0], [800.0, 7285.5], [814.0, 7174.0], [813.0, 7132.0], [812.0, 7239.5], [810.0, 7265.0], [809.0, 7270.0], [808.0, 7207.0], [831.0, 6978.0], [817.0, 7070.0], [816.0, 7163.0], [820.0, 7157.0], [819.0, 7065.0], [830.0, 6977.0], [829.0, 7012.0], [827.0, 7086.0], [826.0, 7044.666666666667], [824.0, 7048.0], [807.0, 7252.0], [806.0, 7298.0], [805.0, 7288.0], [804.0, 7340.0], [803.0, 7271.0], [802.0, 7314.0], [822.0, 7050.0], [821.0, 7095.0], [857.0, 6815.0], [862.0, 6833.0], [863.0, 6821.0], [850.0, 6867.0], [849.0, 6919.5], [852.0, 6878.0], [851.0, 6971.0], [861.0, 6893.0], [860.0, 6852.0], [859.0, 6778.0], [856.0, 6814.5], [839.0, 6940.0], [838.0, 6900.0], [837.0, 6969.0], [836.0, 6908.0], [835.0, 6949.0], [834.0, 6989.0], [833.0, 6963.0], [832.0, 7001.0], [847.0, 6884.0], [846.0, 6774.0], [845.0, 6980.0], [844.0, 6922.0], [843.0, 6883.0], [842.0, 6897.0], [841.0, 6975.0], [840.0, 6968.0], [854.0, 6917.0], [853.0, 6907.0], [891.0, 6467.0], [879.0, 3795.0], [878.0, 6792.0], [877.0, 6670.0], [876.0, 6675.0], [875.0, 6681.0], [874.0, 6804.0], [873.0, 6658.0], [872.0, 6845.0], [895.0, 6599.0], [881.0, 6604.0], [880.0, 6807.0], [883.0, 6665.0], [882.0, 6574.0], [885.0, 6595.0], [884.0, 6652.0], [893.0, 6523.0], [892.0, 6543.0], [890.0, 6599.0], [889.0, 6612.0], [888.0, 6613.0], [871.0, 6724.0], [870.0, 6722.0], [869.0, 6863.0], [868.0, 6780.0], [867.0, 6746.0], [866.0, 6788.0], [865.0, 6841.0], [864.0, 6848.0], [887.0, 6573.0], [886.0, 6542.0], [902.0, 3761.5], [926.0, 6115.0], [899.0, 3790.5], [898.0, 6446.0], [897.0, 6554.0], [896.0, 6649.0], [901.0, 6463.0], [912.0, 3791.0], [911.0, 3767.5], [910.0, 6613.0], [909.0, 6462.0], [908.0, 6544.0], [907.0, 6535.0], [905.0, 6426.0], [904.0, 6455.0], [916.0, 2401.75], [915.0, 6457.0], [914.0, 6462.0], [913.0, 6497.0], [917.0, 6428.0], [919.0, 6370.0], [918.0, 6583.0], [927.0, 6173.0], [925.0, 6345.0], [923.0, 6281.0], [922.0, 6464.0], [921.0, 6442.0], [920.0, 6324.0], [953.0, 6041.0], [957.0, 5987.0], [929.0, 4473.0], [943.0, 2757.333333333333], [942.0, 6030.0], [941.0, 6032.0], [940.0, 5989.0], [939.0, 6144.5], [937.0, 6060.5], [944.0, 3587.0], [946.0, 6096.0], [945.0, 6089.0], [949.0, 5966.0], [947.0, 6096.0], [951.0, 6024.0], [950.0, 6012.0], [959.0, 5798.0], [958.0, 5794.0], [956.0, 6045.0], [955.0, 5970.0], [954.0, 6084.0], [952.0, 6030.0], [935.0, 6184.0], [934.0, 6053.0], [933.0, 6135.0], [932.0, 6157.0], [931.0, 6266.0], [930.0, 6245.0], [989.0, 3388.0], [967.0, 3509.5], [972.0, 3454.0], [971.0, 5764.0], [970.0, 5812.0], [969.0, 5639.0], [968.0, 5910.0], [973.0, 5657.0], [975.0, 5555.0], [960.0, 5807.0], [963.0, 5819.5], [961.0, 5751.0], [966.0, 5794.0], [964.0, 5795.0], [974.0, 5782.0], [978.0, 3419.5], [977.0, 5707.0], [976.0, 5554.0], [979.0, 5668.0], [981.0, 5610.0], [980.0, 5663.0], [983.0, 5603.0], [982.0, 5627.0], [991.0, 5564.0], [990.0, 5468.0], [988.0, 5529.0], [987.0, 5559.0], [986.0, 5626.0], [985.0, 5614.5], [1018.0, 3289.5], [1022.0, 5171.0], [1015.0, 3286.0], [1014.0, 2599.666666666667], [1023.0, 5257.0], [1009.0, 5276.0], [1008.0, 5257.0], [1011.0, 5354.0], [1010.0, 5308.0], [1013.0, 5257.0], [1012.0, 5333.0], [1021.0, 5115.0], [1020.0, 5237.0], [1019.0, 5227.0], [1017.0, 5191.0], [1016.0, 5230.0], [1007.0, 5351.0], [993.0, 5496.0], [992.0, 5540.0], [995.0, 5442.0], [994.0, 5492.0], [997.0, 5415.0], [996.0, 5374.0], [999.0, 5210.0], [998.0, 5386.0], [1006.0, 5276.0], [1005.0, 5279.0], [1004.0, 5269.0], [1003.0, 5291.0], [1002.0, 5323.0], [1001.0, 5398.0], [1000.0, 5420.0], [1084.0, 4646.0], [1056.0, 4825.0], [1058.0, 4790.0], [1060.0, 4780.0], [1062.0, 4755.0], [1066.0, 4748.0], [1070.0, 4646.0], [1068.0, 4703.0], [1086.0, 4531.0], [1082.0, 4652.0], [1078.0, 4649.0], [1076.0, 4801.5], [1074.0, 4655.0], [1072.0, 4590.0], [1038.0, 5018.0], [1036.0, 4957.0], [1032.0, 4940.0], [1030.0, 4896.0], [1028.0, 5053.0], [1026.0, 5056.0], [1024.0, 5223.0], [1054.0, 4810.5], [1052.0, 4777.0], [1050.0, 4900.0], [1048.0, 4798.0], [1046.0, 4835.0], [1044.0, 4901.0], [1042.0, 4879.0], [1040.0, 4914.0], [1094.0, 4584.0], [1142.0, 2774.0], [1088.0, 4499.0], [1090.0, 4533.0], [1092.0, 4571.0], [1096.0, 4511.0], [1098.0, 4600.0], [1102.0, 4437.0], [1136.0, 4310.0], [1138.0, 4194.0], [1116.0, 4288.0], [1114.0, 4411.0], [1112.0, 4342.0], [1110.0, 4370.0], [1108.0, 4402.0], [1106.0, 4480.0], [1104.0, 4401.0], [1118.0, 4326.0], [1130.0, 2776.5], [1128.0, 4269.0], [1126.0, 4341.0], [1124.0, 4320.0], [1122.0, 4385.0], [1120.0, 4329.0], [1132.0, 4234.0], [1134.0, 4228.0], [1150.0, 4006.0], [1148.0, 3941.0], [1146.0, 4254.0], [1154.0, 3825.0], [1208.0, 3592.0], [1170.0, 2994.3333333333335], [1168.0, 3716.0], [1172.0, 3703.0], [1174.0, 3866.0], [1176.0, 3692.0], [1180.0, 3667.0], [1182.0, 3679.0], [1188.0, 2475.0], [1186.0, 3722.0], [1184.0, 3626.0], [1190.0, 3547.0], [1194.0, 3547.0], [1196.0, 3595.0], [1198.0, 3621.0], [1200.0, 2117.3333333333335], [1164.0, 3732.0], [1160.0, 3739.0], [1158.0, 3957.0], [1156.0, 3825.0], [1202.0, 3518.0], [1204.0, 3515.0], [1206.0, 3510.0], [1214.0, 3379.0], [1212.0, 3422.0], [1210.0, 3369.0], [1218.0, 3529.0], [1238.0, 2382.5], [1236.0, 3275.0], [1234.0, 3284.0], [1240.0, 3233.0], [1242.0, 3185.0], [1244.0, 3211.0], [1216.0, 3503.0], [1220.0, 3392.0], [1222.0, 3438.0], [1224.0, 3279.0], [1226.0, 3311.0], [1228.0, 3307.0], [1230.0, 3239.0], [1246.0, 3228.0], [1266.0, 3079.0], [1268.0, 2907.0], [1270.0, 2993.0], [1272.0, 2940.0], [1258.0, 2203.0], [1256.0, 2989.0], [1254.0, 3022.0], [1252.0, 3143.0], [1250.0, 3152.0], [1248.0, 3157.0], [1260.0, 2865.0], [1262.0, 2910.0], [1278.0, 2912.0], [1276.0, 2872.0], [1274.0, 2934.0], [1338.0, 1957.0], [1318.0, 2089.0], [1340.0, 1739.0], [1342.0, 2160.0], [1312.0, 2110.0], [1314.0, 2116.0], [1316.0, 2334.0], [1320.0, 2087.0], [1324.0, 2127.5], [1322.0, 1986.0], [1326.0, 2072.0], [1336.0, 1936.0], [1332.0, 1991.5], [1330.0, 2126.0], [1328.0, 2079.5], [1280.0, 2768.0], [1282.0, 2715.0], [1284.0, 2826.0], [1286.0, 2567.0], [1288.0, 2543.0], [1290.0, 2548.0], [1292.0, 2524.5], [1294.0, 2642.0], [1310.0, 2099.0], [1308.0, 2160.0], [1306.0, 2195.0], [1304.0, 2327.0], [1302.0, 2267.0], [1300.0, 2520.0], [1298.0, 2529.0], [1296.0, 2392.0], [1352.0, 2074.0], [1402.0, 1745.6666666666667], [1362.0, 2005.0], [1364.0, 2106.0], [1366.0, 1828.0], [1368.0, 1751.0], [1400.0, 1953.0], [1398.0, 1924.0], [1394.0, 1934.5], [1392.0, 1960.0], [1344.0, 2174.5], [1346.0, 1974.0], [1350.0, 2164.0], [1356.0, 2014.5], [1354.0, 1999.5], [1358.0, 2024.5], [1374.0, 1863.0], [1372.0, 1996.0], [1370.0, 1986.0], [1376.0, 1813.0], [1378.0, 1858.0], [1380.0, 2030.0], [1382.0, 2017.0], [1384.0, 1724.0], [1388.0, 1901.0], [1386.0, 1938.0], [1390.0, 1936.0], [1406.0, 1823.0], [1408.0, 1768.0], [1438.0, 1784.3333333333333], [1422.0, 1703.5], [1416.0, 1839.0], [1410.0, 1918.0], [1414.0, 1871.0], [1412.0, 1918.0], [1420.0, 1789.0], [1440.0, 1806.0], [1436.0, 1636.0], [1434.0, 1824.0], [1432.0, 1826.0], [1430.0, 1823.0], [1428.0, 1723.0], [1426.0, 1628.0], [1424.0, 1819.6666666666667], [1442.0, 1781.0], [1079.0, 4643.0], [1075.0, 4789.0], [1087.0, 4606.0], [1057.0, 4784.0], [1059.0, 4646.0], [1061.0, 4736.0], [1063.0, 4727.0], [1065.0, 4732.0], [1085.0, 4617.0], [1083.0, 4688.0], [1081.0, 4708.0], [1077.0, 4658.0], [1073.0, 4618.0], [1039.0, 4868.0], [1037.0, 5159.0], [1035.0, 4923.5], [1033.0, 4965.0], [1029.0, 5066.0], [1027.0, 5071.0], [1025.0, 5297.0], [1055.0, 4851.0], [1051.0, 4810.0], [1049.0, 4777.0], [1047.0, 4763.0], [1045.0, 4853.0], [1043.0, 4785.0], [1041.0, 4868.0], [1097.0, 4506.0], [1137.0, 4205.0], [1149.0, 3848.0], [1089.0, 2935.5], [1091.0, 4578.0], [1095.0, 4594.5], [1099.0, 4589.0], [1101.0, 4442.0], [1103.0, 4454.0], [1141.0, 4128.0], [1139.0, 4127.0], [1117.0, 2804.0], [1115.0, 4372.0], [1113.0, 4354.0], [1111.0, 4339.0], [1109.0, 4446.0], [1107.0, 4495.0], [1105.0, 4434.0], [1119.0, 2780.0], [1129.0, 4256.0], [1127.0, 4245.0], [1125.0, 4299.0], [1123.0, 4202.0], [1121.0, 4245.0], [1131.0, 4273.0], [1133.0, 4284.0], [1135.0, 4269.0], [1151.0, 3997.0], [1147.0, 4077.0], [1145.0, 4206.5], [1143.0, 4251.0], [1155.0, 2501.5], [1213.0, 3437.0], [1171.0, 3781.0], [1173.0, 3825.0], [1175.0, 3759.0], [1179.0, 3670.5], [1177.0, 3676.0], [1181.0, 3586.0], [1183.0, 3669.0], [1153.0, 3915.5], [1187.0, 3594.0], [1185.0, 3592.0], [1189.0, 3609.0], [1193.0, 3610.5], [1191.0, 3540.0], [1195.0, 3716.0], [1197.0, 3485.0], [1199.0, 3621.0], [1167.0, 3748.5], [1165.0, 3699.0], [1163.0, 3721.0], [1161.0, 3723.0], [1159.0, 3856.0], [1157.0, 3806.0], [1201.0, 3414.0], [1203.0, 3599.0], [1205.0, 3585.0], [1207.0, 3676.0], [1209.0, 3497.0], [1215.0, 3497.0], [1247.0, 3077.0], [1269.0, 2931.0], [1277.0, 2897.0], [1237.0, 3103.0], [1235.0, 3281.0], [1233.0, 3163.0], [1239.0, 3141.0], [1241.0, 3082.0], [1243.0, 3279.0], [1245.0, 3096.0], [1219.0, 3405.0], [1223.0, 3469.0], [1225.0, 3276.0], [1227.0, 3290.0], [1229.0, 3204.0], [1231.0, 3235.0], [1265.0, 2853.5], [1267.0, 2977.0], [1271.0, 2880.0], [1257.0, 3029.0], [1255.0, 3081.0], [1253.0, 3219.0], [1251.0, 3130.0], [1249.0, 3201.0], [1259.0, 3082.0], [1261.0, 2821.0], [1263.0, 2949.0], [1279.0, 2762.0], [1275.0, 2892.0], [1273.0, 2872.0], [1335.0, 2080.5], [1339.0, 2211.0], [1313.0, 2118.0], [1315.0, 2131.0], [1317.0, 2197.0], [1319.0, 2054.0], [1321.0, 2127.0], [1325.0, 2085.0], [1341.0, 1921.0], [1337.0, 2039.0], [1333.0, 2045.0], [1311.0, 2163.0], [1281.0, 2659.0], [1283.0, 2766.0], [1285.0, 2651.0], [1287.0, 2614.0], [1289.0, 2474.0], [1293.0, 2527.0], [1295.0, 2644.0], [1309.0, 2154.0], [1307.0, 2167.0], [1305.0, 2261.0], [1303.0, 2199.0], [1301.0, 2370.0], [1299.0, 2620.0], [1297.0, 2543.0], [1395.0, 1937.0], [1369.0, 1848.0], [1363.0, 1842.5], [1361.0, 1946.0], [1365.0, 1873.0], [1367.0, 1750.0], [1401.0, 1788.5], [1399.0, 1781.0], [1397.0, 1868.0], [1375.0, 1811.0], [1345.0, 2157.0], [1347.0, 2157.0], [1349.0, 2156.0], [1351.0, 2148.0], [1359.0, 1958.5], [1373.0, 1798.0], [1407.0, 1801.0], [1377.0, 1820.0], [1379.0, 2043.0], [1381.0, 2017.0], [1383.0, 2012.0], [1385.0, 1935.0], [1391.0, 1977.0], [1405.0, 1853.0], [1403.0, 1926.0], [1409.0, 1893.0], [1419.0, 1758.0], [1415.0, 1671.5], [1417.0, 1733.0], [1439.0, 1618.0], [1411.0, 1684.0], [1421.0, 1779.5], [1423.0, 1759.5], [1437.0, 1765.0], [1435.0, 1821.0], [1433.0, 1729.0], [1431.0, 1843.0], [1429.0, 1842.0], [1427.0, 1839.0], [1425.0, 1709.0], [1441.0, 1800.0], [1.0, 13366.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[735.9513333333331, 7618.193999999999]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1442.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1475.5, "minX": 1.73302248E12, "maxY": 7186.083333333333, "series": [{"data": [[1.73302248E12, 5986.85], [1.73302254E12, 7186.083333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73302248E12, 1475.5], [1.73302254E12, 1774.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302254E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3963.835535976505, "minX": 1.73302248E12, "maxY": 10656.799755799764, "series": [{"data": [[1.73302248E12, 3963.835535976505], [1.73302254E12, 10656.799755799764]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302254E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3963.7841409691628, "minX": 1.73302248E12, "maxY": 10656.780219780228, "series": [{"data": [[1.73302248E12, 3963.7841409691628], [1.73302254E12, 10656.780219780228]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302254E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.187958883994124, "minX": 1.73302248E12, "maxY": 10.321123321123338, "series": [{"data": [[1.73302248E12, 8.187958883994124], [1.73302254E12, 10.321123321123338]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302254E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 314.0, "minX": 1.73302248E12, "maxY": 13495.0, "series": [{"data": [[1.73302248E12, 7157.0], [1.73302254E12, 13495.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73302248E12, 6603.0], [1.73302254E12, 13306.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73302248E12, 7042.259999999999], [1.73302254E12, 13411.2]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73302248E12, 6871.5], [1.73302254E12, 13362.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73302248E12, 314.0], [1.73302254E12, 7063.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73302248E12, 3825.0], [1.73302254E12, 10437.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302254E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 540.5, "minX": 4.0, "maxY": 13354.0, "series": [{"data": [[132.0, 2041.0], [4.0, 540.5], [68.0, 7378.5], [74.0, 3135.5], [80.0, 1618.0], [83.0, 5687.0], [90.0, 11054.0], [95.0, 13354.0], [96.0, 4770.5], [100.0, 3817.5], [105.0, 12003.0], [111.0, 10640.0], [112.0, 6702.0], [119.0, 10091.0], [120.0, 9301.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 132.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 540.5, "minX": 4.0, "maxY": 13354.0, "series": [{"data": [[132.0, 2041.0], [4.0, 540.5], [68.0, 7378.5], [74.0, 3135.5], [80.0, 1618.0], [83.0, 5687.0], [90.0, 11054.0], [95.0, 13354.0], [96.0, 4770.5], [100.0, 3817.5], [105.0, 12003.0], [111.0, 10640.0], [112.0, 6702.0], [119.0, 10091.0], [120.0, 9301.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 132.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73302248E12, "maxY": 25.0, "series": [{"data": [[1.73302248E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 11.35, "minX": 1.73302248E12, "maxY": 13.65, "series": [{"data": [[1.73302248E12, 11.35], [1.73302254E12, 13.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73302254E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 11.35, "minX": 1.73302248E12, "maxY": 13.65, "series": [{"data": [[1.73302248E12, 11.35], [1.73302254E12, 13.65]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302254E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 11.35, "minX": 1.73302248E12, "maxY": 13.65, "series": [{"data": [[1.73302248E12, 11.35], [1.73302254E12, 13.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73302254E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

